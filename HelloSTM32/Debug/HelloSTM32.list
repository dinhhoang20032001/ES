
HelloSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007368  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08007518  08007518  00017518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800753c  0800753c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800753c  0800753c  0001753c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007544  08007544  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800754c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000006bc  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006cc  200006cc  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002678c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b60  00000000  00000000  000467cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002038  00000000  00000000  0004b330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e78  00000000  00000000  0004d368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b7c  00000000  00000000  0004f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000256bc  00000000  00000000  00077d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3959  00000000  00000000  0009d418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00190d71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008aa4  00000000  00000000  00190dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007500 	.word	0x08007500

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08007500 	.word	0x08007500

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f001 f871 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f857 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 faab 	bl	8000a84 <MX_GPIO_Init>
  MX_CRC_Init();
 800052e:	f000 f8bd 	bl	80006ac <MX_CRC_Init>
  MX_DMA2D_Init();
 8000532:	f000 f8cf 	bl	80006d4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000536:	f000 fa55 	bl	80009e4 <MX_FMC_Init>
  MX_I2C3_Init();
 800053a:	f000 f8fd 	bl	8000738 <MX_I2C3_Init>
  MX_LTDC_Init();
 800053e:	f000 f93b 	bl	80007b8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000542:	f000 f9b9 	bl	80008b8 <MX_SPI5_Init>
  // MX_TIM1_Init();
  MX_USART1_UART_Init();
 8000546:	f000 fa23 	bl	8000990 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 800054a:	f000 f9eb 	bl	8000924 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim7);
 800054e:	481d      	ldr	r0, [pc, #116]	; (80005c4 <main+0xa8>)
 8000550:	f004 fb8a 	bl	8004c68 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055a:	481b      	ldr	r0, [pc, #108]	; (80005c8 <main+0xac>)
 800055c:	f001 fd68 	bl	8002030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000566:	4818      	ldr	r0, [pc, #96]	; (80005c8 <main+0xac>)
 8000568:	f001 fd62 	bl	8002030 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPIO_PinState UserButtonState = HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin);
 800056c:	2101      	movs	r1, #1
 800056e:	4817      	ldr	r0, [pc, #92]	; (80005cc <main+0xb0>)
 8000570:	f001 fd46 	bl	8002000 <HAL_GPIO_ReadPin>
 8000574:	4603      	mov	r3, r0
 8000576:	73fb      	strb	r3, [r7, #15]
	  if(UserButtonState == GPIO_PIN_SET){
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d106      	bne.n	800058c <main+0x70>
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000584:	4810      	ldr	r0, [pc, #64]	; (80005c8 <main+0xac>)
 8000586:	f001 fd53 	bl	8002030 <HAL_GPIO_WritePin>
 800058a:	e005      	b.n	8000598 <main+0x7c>
	  }
	  else{
		  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000592:	480d      	ldr	r0, [pc, #52]	; (80005c8 <main+0xac>)
 8000594:	f001 fd4c 	bl	8002030 <HAL_GPIO_WritePin>
	  }
	  char buffer [10] = "IT4210ES\r\n";
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <main+0xb4>)
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	ca07      	ldmia	r2, {r0, r1, r2}
 800059e:	c303      	stmia	r3!, {r0, r1}
 80005a0:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(500);
 80005a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a6:	f001 f871 	bl	800168c <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 2);
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fe1f 	bl	80001f0 <strlen>
 80005b2:	4603      	mov	r3, r0
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	1d39      	adds	r1, r7, #4
 80005b8:	2302      	movs	r3, #2
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <main+0xb8>)
 80005bc:	f004 fe71 	bl	80052a2 <HAL_UART_Transmit>
  {
 80005c0:	e7d4      	b.n	800056c <main+0x50>
 80005c2:	bf00      	nop
 80005c4:	200001c8 	.word	0x200001c8
 80005c8:	40021800 	.word	0x40021800
 80005cc:	40020000 	.word	0x40020000
 80005d0:	08007518 	.word	0x08007518
 80005d4:	20000210 	.word	0x20000210

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f006 ff82 	bl	80074f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <SystemClock_Config+0xd0>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000650:	2348      	movs	r3, #72	; 0x48
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000658:	2303      	movs	r3, #3
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fb6b 	bl	8003d3c <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 fb38 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2102      	movs	r1, #2
 800068c:	4618      	mov	r0, r3
 800068e:	f003 fdcd 	bl	800422c <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000698:	f000 fb22 	bl	8000ce0 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_CRC_Init+0x20>)
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <MX_CRC_Init+0x24>)
 80006b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_CRC_Init+0x20>)
 80006b8:	f001 f8ee 	bl	8001898 <HAL_CRC_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006c2:	f000 fb0d 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000002c 	.word	0x2000002c
 80006d0:	40023000 	.word	0x40023000

080006d4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006da:	4a16      	ldr	r2, [pc, #88]	; (8000734 <MX_DMA2D_Init+0x60>)
 80006dc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_DMA2D_Init+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_DMA2D_Init+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_DMA2D_Init+0x5c>)
 800070a:	f001 f8e1 	bl	80018d0 <HAL_DMA2D_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000714:	f000 fae4 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000718:	2101      	movs	r1, #1
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_DMA2D_Init+0x5c>)
 800071c:	f001 fa32 	bl	8001b84 <HAL_DMA2D_ConfigLayer>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000726:	f000 fadb 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000034 	.word	0x20000034
 8000734:	4002b000 	.word	0x4002b000

08000738 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_I2C3_Init+0x74>)
 800073e:	4a1c      	ldr	r2, [pc, #112]	; (80007b0 <MX_I2C3_Init+0x78>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_I2C3_Init+0x74>)
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <MX_I2C3_Init+0x7c>)
 8000746:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_I2C3_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_I2C3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_I2C3_Init+0x74>)
 8000756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_I2C3_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_I2C3_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_I2C3_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_I2C3_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_I2C3_Init+0x74>)
 8000776:	f002 fdb9 	bl	80032ec <HAL_I2C_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000780:	f000 faae 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	4809      	ldr	r0, [pc, #36]	; (80007ac <MX_I2C3_Init+0x74>)
 8000788:	f002 fef4 	bl	8003574 <HAL_I2CEx_ConfigAnalogFilter>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000792:	f000 faa5 	bl	8000ce0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_I2C3_Init+0x74>)
 800079a:	f002 ff27 	bl	80035ec <HAL_I2CEx_ConfigDigitalFilter>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007a4:	f000 fa9c 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000074 	.word	0x20000074
 80007b0:	40005c00 	.word	0x40005c00
 80007b4:	000186a0 	.word	0x000186a0

080007b8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2234      	movs	r2, #52	; 0x34
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f006 fe93 	bl	80074f0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007ca:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <MX_LTDC_Init+0xf8>)
 80007cc:	4a39      	ldr	r2, [pc, #228]	; (80008b4 <MX_LTDC_Init+0xfc>)
 80007ce:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007d0:	4b37      	ldr	r3, [pc, #220]	; (80008b0 <MX_LTDC_Init+0xf8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007d6:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <MX_LTDC_Init+0xf8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007dc:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <MX_LTDC_Init+0xf8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007e2:	4b33      	ldr	r3, [pc, #204]	; (80008b0 <MX_LTDC_Init+0xf8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <MX_LTDC_Init+0xf8>)
 80007ea:	2209      	movs	r2, #9
 80007ec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <MX_LTDC_Init+0xf8>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <MX_LTDC_Init+0xf8>)
 80007f6:	221d      	movs	r2, #29
 80007f8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <MX_LTDC_Init+0xf8>)
 80007fc:	2203      	movs	r2, #3
 80007fe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000800:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <MX_LTDC_Init+0xf8>)
 8000802:	f240 120d 	movw	r2, #269	; 0x10d
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_LTDC_Init+0xf8>)
 800080a:	f240 1243 	movw	r2, #323	; 0x143
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_LTDC_Init+0xf8>)
 8000812:	f240 1217 	movw	r2, #279	; 0x117
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <MX_LTDC_Init+0xf8>)
 800081a:	f240 1247 	movw	r2, #327	; 0x147
 800081e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000820:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <MX_LTDC_Init+0xf8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_LTDC_Init+0xf8>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_LTDC_Init+0xf8>)
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000838:	481d      	ldr	r0, [pc, #116]	; (80008b0 <MX_LTDC_Init+0xf8>)
 800083a:	f002 ff17 	bl	800366c <HAL_LTDC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000844:	f000 fa4c 	bl	8000ce0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800084c:	23f0      	movs	r3, #240	; 0xf0
 800084e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000854:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000858:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800085a:	2302      	movs	r3, #2
 800085c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800085e:	23ff      	movs	r3, #255	; 0xff
 8000860:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000866:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800086a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800086c:	2307      	movs	r3, #7
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000870:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000876:	23f0      	movs	r3, #240	; 0xf0
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800087a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_LTDC_Init+0xf8>)
 800089a:	f003 f879 	bl	8003990 <HAL_LTDC_ConfigLayer>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008a4:	f000 fa1c 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3738      	adds	r7, #56	; 0x38
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000c8 	.word	0x200000c8
 80008b4:	40016800 	.word	0x40016800

080008b8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_SPI5_Init+0x64>)
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_SPI5_Init+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_SPI5_Init+0x64>)
 80008c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_SPI5_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_SPI5_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_SPI5_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI5_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_SPI5_Init+0x64>)
 80008e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SPI5_Init+0x64>)
 80008ec:	2218      	movs	r2, #24
 80008ee:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_SPI5_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SPI5_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_SPI5_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_SPI5_Init+0x64>)
 8000904:	220a      	movs	r2, #10
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_SPI5_Init+0x64>)
 800090a:	f004 f8d5 	bl	8004ab8 <HAL_SPI_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000914:	f000 f9e4 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000170 	.word	0x20000170
 8000920:	40015000 	.word	0x40015000

08000924 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_TIM7_Init+0x64>)
 8000934:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_TIM7_Init+0x68>)
 8000936:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_TIM7_Init+0x64>)
 800093a:	2259      	movs	r2, #89	; 0x59
 800093c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_TIM7_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_TIM7_Init+0x64>)
 8000946:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800094a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_TIM7_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_TIM7_Init+0x64>)
 8000954:	f004 f939 	bl	8004bca <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800095e:	f000 f9bf 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_TIM7_Init+0x64>)
 8000970:	f004 fbba 	bl	80050e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800097a:	f000 f9b1 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200001c8 	.word	0x200001c8
 800098c:	40001400 	.word	0x40001400

08000990 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_USART1_UART_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c8:	f004 fc1e 	bl	8005208 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009d2:	f000 f985 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000210 	.word	0x20000210
 80009e0:	40011000 	.word	0x40011000

080009e4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_FMC_Init+0x98>)
 80009fe:	4a20      	ldr	r2, [pc, #128]	; (8000a80 <MX_FMC_Init+0x9c>)
 8000a00:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a16:	2210      	movs	r2, #16
 8000a18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a1c:	2240      	movs	r2, #64	; 0x40
 8000a1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a22:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a34:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a50:	2307      	movs	r3, #7
 8000a52:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a54:	2303      	movs	r3, #3
 8000a56:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_FMC_Init+0x98>)
 8000a66:	f003 fff3 	bl	8004a50 <HAL_SDRAM_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a70:	f000 f936 	bl	8000ce0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000254 	.word	0x20000254
 8000a80:	a0000140 	.word	0xa0000140

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	4b81      	ldr	r3, [pc, #516]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a80      	ldr	r2, [pc, #512]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b7e      	ldr	r3, [pc, #504]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	623b      	str	r3, [r7, #32]
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	4b7a      	ldr	r3, [pc, #488]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a79      	ldr	r2, [pc, #484]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b77      	ldr	r3, [pc, #476]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	4b73      	ldr	r3, [pc, #460]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a72      	ldr	r2, [pc, #456]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b70      	ldr	r3, [pc, #448]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	4b6c      	ldr	r3, [pc, #432]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a6b      	ldr	r2, [pc, #428]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b69      	ldr	r3, [pc, #420]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b65      	ldr	r3, [pc, #404]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a64      	ldr	r2, [pc, #400]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b62      	ldr	r3, [pc, #392]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b5e      	ldr	r3, [pc, #376]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a5d      	ldr	r2, [pc, #372]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a56      	ldr	r2, [pc, #344]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b54      	ldr	r3, [pc, #336]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b50      	ldr	r3, [pc, #320]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a4f      	ldr	r2, [pc, #316]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ca4 <MX_GPIO_Init+0x220>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2116      	movs	r1, #22
 8000b7e:	484a      	ldr	r0, [pc, #296]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000b80:	f001 fa56 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2180      	movs	r1, #128	; 0x80
 8000b88:	4848      	ldr	r0, [pc, #288]	; (8000cac <MX_GPIO_Init+0x228>)
 8000b8a:	f001 fa51 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b94:	4846      	ldr	r0, [pc, #280]	; (8000cb0 <MX_GPIO_Init+0x22c>)
 8000b96:	f001 fa4b 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ba0:	4844      	ldr	r0, [pc, #272]	; (8000cb4 <MX_GPIO_Init+0x230>)
 8000ba2:	f001 fa45 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000ba6:	2316      	movs	r3, #22
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	483a      	ldr	r0, [pc, #232]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000bbe:	f001 f873 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4835      	ldr	r0, [pc, #212]	; (8000cac <MX_GPIO_Init+0x228>)
 8000bd6:	f001 f867 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bda:	f248 0306 	movw	r3, #32774	; 0x8006
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	482e      	ldr	r0, [pc, #184]	; (8000cac <MX_GPIO_Init+0x228>)
 8000bf2:	f001 f859 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4827      	ldr	r0, [pc, #156]	; (8000cac <MX_GPIO_Init+0x228>)
 8000c0e:	f001 f84b 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c12:	2320      	movs	r3, #32
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c16:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	4820      	ldr	r0, [pc, #128]	; (8000ca8 <MX_GPIO_Init+0x224>)
 8000c28:	f001 f83e 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481e      	ldr	r0, [pc, #120]	; (8000cb8 <MX_GPIO_Init+0x234>)
 8000c40:	f001 f832 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4815      	ldr	r0, [pc, #84]	; (8000cb0 <MX_GPIO_Init+0x22c>)
 8000c5a:	f001 f825 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c5e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <MX_GPIO_Init+0x22c>)
 8000c78:	f001 f816 	bl	8001ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c7c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c92:	4619      	mov	r1, r3
 8000c94:	4807      	ldr	r0, [pc, #28]	; (8000cb4 <MX_GPIO_Init+0x230>)
 8000c96:	f001 f807 	bl	8001ca8 <HAL_GPIO_Init>

}
 8000c9a:	bf00      	nop
 8000c9c:	3738      	adds	r7, #56	; 0x38
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020c00 	.word	0x40020c00
 8000cb4:	40021800 	.word	0x40021800
 8000cb8:	40020400 	.word	0x40020400

08000cbc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d101      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cce:	f000 fcbd 	bl	800164c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40001000 	.word	0x40001000

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_MspInit+0x54>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <HAL_MspInit+0x54>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x54>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_MspInit+0x54>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_MspInit+0x54>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_MspInit+0x54>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	210f      	movs	r1, #15
 8000d2e:	f06f 0001 	mvn.w	r0, #1
 8000d32:	f000 fd87 	bl	8001844 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <HAL_CRC_MspInit+0x3c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10d      	bne.n	8000d72 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <HAL_CRC_MspInit+0x40>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <HAL_CRC_MspInit+0x40>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <HAL_CRC_MspInit+0x40>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40023000 	.word	0x40023000
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_DMA2D_MspInit+0x48>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d115      	bne.n	8000dc6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_DMA2D_MspInit+0x4c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <HAL_DMA2D_MspInit+0x4c>)
 8000da4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_DMA2D_MspInit+0x4c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2105      	movs	r1, #5
 8000dba:	205a      	movs	r0, #90	; 0x5a
 8000dbc:	f000 fd42 	bl	8001844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000dc0:	205a      	movs	r0, #90	; 0x5a
 8000dc2:	f000 fd5b 	bl	800187c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	4002b000 	.word	0x4002b000
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a29      	ldr	r2, [pc, #164]	; (8000e9c <HAL_I2C_MspInit+0xc4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d14b      	bne.n	8000e92 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <HAL_I2C_MspInit+0xc8>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a27      	ldr	r2, [pc, #156]	; (8000ea0 <HAL_I2C_MspInit+0xc8>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <HAL_I2C_MspInit+0xc8>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <HAL_I2C_MspInit+0xc8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a20      	ldr	r2, [pc, #128]	; (8000ea0 <HAL_I2C_MspInit+0xc8>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <HAL_I2C_MspInit+0xc8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e38:	2312      	movs	r3, #18
 8000e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e44:	2304      	movs	r3, #4
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4815      	ldr	r0, [pc, #84]	; (8000ea4 <HAL_I2C_MspInit+0xcc>)
 8000e50:	f000 ff2a 	bl	8001ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5a:	2312      	movs	r3, #18
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e66:	2304      	movs	r3, #4
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <HAL_I2C_MspInit+0xd0>)
 8000e72:	f000 ff19 	bl	8001ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_I2C_MspInit+0xc8>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_I2C_MspInit+0xc8>)
 8000e80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_I2C_MspInit+0xc8>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40005c00 	.word	0x40005c00
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020000 	.word	0x40020000

08000eac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b09a      	sub	sp, #104	; 0x68
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	2230      	movs	r2, #48	; 0x30
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f006 fb0f 	bl	80074f0 <memset>
  if(hltdc->Instance==LTDC)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a85      	ldr	r2, [pc, #532]	; (80010ec <HAL_LTDC_MspInit+0x240>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	f040 8102 	bne.w	80010e2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ede:	2308      	movs	r3, #8
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000ee2:	2332      	movs	r3, #50	; 0x32
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000eea:	2300      	movs	r3, #0
 8000eec:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fbec 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000efe:	f7ff feef 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
 8000f06:	4b7a      	ldr	r3, [pc, #488]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a79      	ldr	r2, [pc, #484]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b77      	ldr	r3, [pc, #476]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f1a:	623b      	str	r3, [r7, #32]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	4b73      	ldr	r3, [pc, #460]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a72      	ldr	r2, [pc, #456]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b70      	ldr	r3, [pc, #448]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0320 	and.w	r3, r3, #32
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b6c      	ldr	r3, [pc, #432]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a6b      	ldr	r2, [pc, #428]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b69      	ldr	r3, [pc, #420]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	4b65      	ldr	r3, [pc, #404]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a64      	ldr	r2, [pc, #400]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b62      	ldr	r3, [pc, #392]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b5e      	ldr	r3, [pc, #376]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a5d      	ldr	r2, [pc, #372]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b5b      	ldr	r3, [pc, #364]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b57      	ldr	r3, [pc, #348]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a56      	ldr	r2, [pc, #344]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b54      	ldr	r3, [pc, #336]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b50      	ldr	r3, [pc, #320]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a4f      	ldr	r2, [pc, #316]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <HAL_LTDC_MspInit+0x244>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fd8:	230e      	movs	r3, #14
 8000fda:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4844      	ldr	r0, [pc, #272]	; (80010f4 <HAL_LTDC_MspInit+0x248>)
 8000fe4:	f000 fe60 	bl	8001ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000fe8:	f641 0358 	movw	r3, #6232	; 0x1858
 8000fec:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ffa:	230e      	movs	r3, #14
 8000ffc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001002:	4619      	mov	r1, r3
 8001004:	483c      	ldr	r0, [pc, #240]	; (80010f8 <HAL_LTDC_MspInit+0x24c>)
 8001006:	f000 fe4f 	bl	8001ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800100a:	2303      	movs	r3, #3
 800100c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800101a:	2309      	movs	r3, #9
 800101c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001022:	4619      	mov	r1, r3
 8001024:	4835      	ldr	r0, [pc, #212]	; (80010fc <HAL_LTDC_MspInit+0x250>)
 8001026:	f000 fe3f 	bl	8001ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800102a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800102e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800103c:	230e      	movs	r3, #14
 800103e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001044:	4619      	mov	r1, r3
 8001046:	482d      	ldr	r0, [pc, #180]	; (80010fc <HAL_LTDC_MspInit+0x250>)
 8001048:	f000 fe2e 	bl	8001ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800104c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001050:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800105e:	230e      	movs	r3, #14
 8001060:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001062:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001066:	4619      	mov	r1, r3
 8001068:	4825      	ldr	r0, [pc, #148]	; (8001100 <HAL_LTDC_MspInit+0x254>)
 800106a:	f000 fe1d 	bl	8001ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800106e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001072:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001080:	230e      	movs	r3, #14
 8001082:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001084:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001088:	4619      	mov	r1, r3
 800108a:	481e      	ldr	r0, [pc, #120]	; (8001104 <HAL_LTDC_MspInit+0x258>)
 800108c:	f000 fe0c 	bl	8001ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001090:	2348      	movs	r3, #72	; 0x48
 8001092:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a0:	230e      	movs	r3, #14
 80010a2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010a8:	4619      	mov	r1, r3
 80010aa:	4817      	ldr	r0, [pc, #92]	; (8001108 <HAL_LTDC_MspInit+0x25c>)
 80010ac:	f000 fdfc 	bl	8001ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010c2:	2309      	movs	r3, #9
 80010c4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ca:	4619      	mov	r1, r3
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <HAL_LTDC_MspInit+0x254>)
 80010ce:	f000 fdeb 	bl	8001ca8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2105      	movs	r1, #5
 80010d6:	2058      	movs	r0, #88	; 0x58
 80010d8:	f000 fbb4 	bl	8001844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010dc:	2058      	movs	r0, #88	; 0x58
 80010de:	f000 fbcd 	bl	800187c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3768      	adds	r7, #104	; 0x68
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40016800 	.word	0x40016800
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40021400 	.word	0x40021400
 80010f8:	40020000 	.word	0x40020000
 80010fc:	40020400 	.word	0x40020400
 8001100:	40021800 	.word	0x40021800
 8001104:	40020800 	.word	0x40020800
 8001108:	40020c00 	.word	0x40020c00

0800110c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	; 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a19      	ldr	r2, [pc, #100]	; (8001190 <HAL_SPI_MspInit+0x84>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d12c      	bne.n	8001188 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800113c:	6453      	str	r3, [r2, #68]	; 0x44
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a10      	ldr	r2, [pc, #64]	; (8001194 <HAL_SPI_MspInit+0x88>)
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_SPI_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001166:	f44f 7360 	mov.w	r3, #896	; 0x380
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001178:	2305      	movs	r3, #5
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_SPI_MspInit+0x8c>)
 8001184:	f000 fd90 	bl	8001ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40015000 	.word	0x40015000
 8001194:	40023800 	.word	0x40023800
 8001198:	40021400 	.word	0x40021400

0800119c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <HAL_TIM_Base_MspInit+0x70>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d10e      	bne.n	80011cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_TIM_Base_MspInit+0x74>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a16      	ldr	r2, [pc, #88]	; (8001210 <HAL_TIM_Base_MspInit+0x74>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_TIM_Base_MspInit+0x74>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80011ca:	e01a      	b.n	8001202 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_TIM_Base_MspInit+0x78>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d115      	bne.n	8001202 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_TIM_Base_MspInit+0x74>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <HAL_TIM_Base_MspInit+0x74>)
 80011e0:	f043 0320 	orr.w	r3, r3, #32
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_TIM_Base_MspInit+0x74>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 0320 	and.w	r3, r3, #32
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2105      	movs	r1, #5
 80011f6:	2037      	movs	r0, #55	; 0x37
 80011f8:	f000 fb24 	bl	8001844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80011fc:	2037      	movs	r0, #55	; 0x37
 80011fe:	f000 fb3d 	bl	800187c <HAL_NVIC_EnableIRQ>
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40010000 	.word	0x40010000
 8001210:	40023800 	.word	0x40023800
 8001214:	40001400 	.word	0x40001400

08001218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a19      	ldr	r2, [pc, #100]	; (800129c <HAL_UART_MspInit+0x84>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d12c      	bne.n	8001294 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_UART_MspInit+0x88>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_UART_MspInit+0x88>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_UART_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001272:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001284:	2307      	movs	r3, #7
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_UART_MspInit+0x8c>)
 8001290:	f000 fd0a 	bl	8001ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40011000 	.word	0x40011000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000

080012a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012bc:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <HAL_FMC_MspInit+0x104>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d16f      	bne.n	80013a4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80012c4:	4b39      	ldr	r3, [pc, #228]	; (80013ac <HAL_FMC_MspInit+0x104>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <HAL_FMC_MspInit+0x108>)
 80012d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d2:	4a37      	ldr	r2, [pc, #220]	; (80013b0 <HAL_FMC_MspInit+0x108>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6393      	str	r3, [r2, #56]	; 0x38
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <HAL_FMC_MspInit+0x108>)
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80012e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012ea:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f8:	230c      	movs	r3, #12
 80012fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	482c      	ldr	r0, [pc, #176]	; (80013b4 <HAL_FMC_MspInit+0x10c>)
 8001302:	f000 fcd1 	bl	8001ca8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001306:	2301      	movs	r3, #1
 8001308:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001316:	230c      	movs	r3, #12
 8001318:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4826      	ldr	r0, [pc, #152]	; (80013b8 <HAL_FMC_MspInit+0x110>)
 8001320:	f000 fcc2 	bl	8001ca8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001324:	f248 1333 	movw	r3, #33075	; 0x8133
 8001328:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001336:	230c      	movs	r3, #12
 8001338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	481f      	ldr	r0, [pc, #124]	; (80013bc <HAL_FMC_MspInit+0x114>)
 8001340:	f000 fcb2 	bl	8001ca8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001344:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001348:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4818      	ldr	r0, [pc, #96]	; (80013c0 <HAL_FMC_MspInit+0x118>)
 8001360:	f000 fca2 	bl	8001ca8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001364:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001368:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001376:	230c      	movs	r3, #12
 8001378:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	4811      	ldr	r0, [pc, #68]	; (80013c4 <HAL_FMC_MspInit+0x11c>)
 8001380:	f000 fc92 	bl	8001ca8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001384:	2360      	movs	r3, #96	; 0x60
 8001386:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001394:	230c      	movs	r3, #12
 8001396:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	480a      	ldr	r0, [pc, #40]	; (80013c8 <HAL_FMC_MspInit+0x120>)
 800139e:	f000 fc83 	bl	8001ca8 <HAL_GPIO_Init>
 80013a2:	e000      	b.n	80013a6 <HAL_FMC_MspInit+0xfe>
    return;
 80013a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000288 	.word	0x20000288
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40021400 	.word	0x40021400
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40021800 	.word	0x40021800
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40020400 	.word	0x40020400

080013cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013d4:	f7ff ff68 	bl	80012a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	; 0x38
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HAL_InitTick+0xe4>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a32      	ldr	r2, [pc, #200]	; (80014c4 <HAL_InitTick+0xe4>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_InitTick+0xe4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800140c:	f107 0210 	add.w	r2, r7, #16
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f003 f928 	bl	800466c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001422:	2b00      	cmp	r3, #0
 8001424:	d103      	bne.n	800142e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001426:	f003 f8f9 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 800142a:	6378      	str	r0, [r7, #52]	; 0x34
 800142c:	e004      	b.n	8001438 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800142e:	f003 f8f5 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 8001432:	4603      	mov	r3, r0
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143a:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <HAL_InitTick+0xe8>)
 800143c:	fba2 2303 	umull	r2, r3, r2, r3
 8001440:	0c9b      	lsrs	r3, r3, #18
 8001442:	3b01      	subs	r3, #1
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_InitTick+0xec>)
 8001448:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <HAL_InitTick+0xf0>)
 800144a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <HAL_InitTick+0xec>)
 800144e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001452:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001454:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <HAL_InitTick+0xec>)
 8001456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001458:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_InitTick+0xec>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_InitTick+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_InitTick+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800146c:	4817      	ldr	r0, [pc, #92]	; (80014cc <HAL_InitTick+0xec>)
 800146e:	f003 fbac 	bl	8004bca <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001478:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11b      	bne.n	80014b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <HAL_InitTick+0xec>)
 8001482:	f003 fbf1 	bl	8004c68 <HAL_TIM_Base_Start_IT>
 8001486:	4603      	mov	r3, r0
 8001488:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800148c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001490:	2b00      	cmp	r3, #0
 8001492:	d111      	bne.n	80014b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001494:	2036      	movs	r0, #54	; 0x36
 8001496:	f000 f9f1 	bl	800187c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d808      	bhi.n	80014b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	2036      	movs	r0, #54	; 0x36
 80014a6:	f000 f9cd 	bl	8001844 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_InitTick+0xf4>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e002      	b.n	80014b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3738      	adds	r7, #56	; 0x38
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40023800 	.word	0x40023800
 80014c8:	431bde83 	.word	0x431bde83
 80014cc:	2000028c 	.word	0x2000028c
 80014d0:	40001000 	.word	0x40001000
 80014d4:	20000004 	.word	0x20000004

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <TIM6_DAC_IRQHandler+0x10>)
 800150a:	f003 fc1d 	bl	8004d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000028c 	.word	0x2000028c

08001518 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800151c:	480a      	ldr	r0, [pc, #40]	; (8001548 <TIM7_IRQHandler+0x30>)
 800151e:	f003 fc13 	bl	8004d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  TimerCount++;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <TIM7_IRQHandler+0x34>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	4a08      	ldr	r2, [pc, #32]	; (800154c <TIM7_IRQHandler+0x34>)
 800152a:	6013      	str	r3, [r2, #0]
  if(TimerCount >= 20){
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <TIM7_IRQHandler+0x34>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b13      	cmp	r3, #19
 8001532:	dd07      	ble.n	8001544 <TIM7_IRQHandler+0x2c>
	  TimerCount = 0;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <TIM7_IRQHandler+0x34>)
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800153a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153e:	4804      	ldr	r0, [pc, #16]	; (8001550 <TIM7_IRQHandler+0x38>)
 8001540:	f000 fd8f 	bl	8002062 <HAL_GPIO_TogglePin>
  }
  /* USER CODE END TIM7_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200001c8 	.word	0x200001c8
 800154c:	200002d4 	.word	0x200002d4
 8001550:	40021800 	.word	0x40021800

08001554 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <OTG_HS_IRQHandler+0x10>)
 800155a:	f000 fd9c 	bl	8002096 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200003c8 	.word	0x200003c8

08001568 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <LTDC_IRQHandler+0x10>)
 800156e:	f002 f94d 	bl	800380c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200000c8 	.word	0x200000c8

0800157c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <DMA2D_IRQHandler+0x10>)
 8001582:	f000 f9ee 	bl	8001962 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000034 	.word	0x20000034

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ba:	490e      	ldr	r1, [pc, #56]	; (80015f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015bc:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d0:	4c0b      	ldr	r4, [pc, #44]	; (8001600 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015de:	f7ff ffd7 	bl	8001590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e2:	f005 ff53 	bl	800748c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e6:	f7fe ff99 	bl	800051c <main>
  bx  lr    
 80015ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015f8:	0800754c 	.word	0x0800754c
  ldr r2, =_sbss
 80015fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001600:	200006cc 	.word	0x200006cc

08001604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_Init+0x40>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_Init+0x40>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_Init+0x40>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f8fc 	bl	800182e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fed2 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff fb56 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
 8001670:	200002d8 	.word	0x200002d8

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200002d8 	.word	0x200002d8

0800168c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff ffee 	bl	8001674 <HAL_GetTick>
 8001698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a4:	d005      	beq.n	80016b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_Delay+0x44>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016b2:	bf00      	nop
 80016b4:	f7ff ffde 	bl	8001674 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d8f7      	bhi.n	80016b4 <HAL_Delay+0x28>
  {
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000008 	.word	0x20000008

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <__NVIC_EnableIRQ+0x38>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ff4c 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001856:	f7ff ff61 	bl	800171c <__NVIC_GetPriorityGrouping>
 800185a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	6978      	ldr	r0, [r7, #20]
 8001862:	f7ff ffb1 	bl	80017c8 <NVIC_EncodePriority>
 8001866:	4602      	mov	r2, r0
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff80 	bl	8001774 <__NVIC_SetPriority>
}
 8001874:	bf00      	nop
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff54 	bl	8001738 <__NVIC_EnableIRQ>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	795b      	ldrb	r3, [r3, #5]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d105      	bne.n	80018c0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fa42 	bl	8000d44 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e03b      	b.n	800195a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fa46 	bl	8000d88 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	f023 0107 	bic.w	r1, r3, #7
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800193a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68d1      	ldr	r1, [r2, #12]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	430b      	orrs	r3, r1
 8001948:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d026      	beq.n	80019d2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d021      	beq.n	80019d2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800199c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2201      	movs	r2, #1
 80019b0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2204      	movs	r2, #4
 80019b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f003 0320 	and.w	r3, r3, #32
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d026      	beq.n	8001a2a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d021      	beq.n	8001a2a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019f4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2220      	movs	r2, #32
 80019fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	f043 0202 	orr.w	r2, r3, #2
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d026      	beq.n	8001a82 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d021      	beq.n	8001a82 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a4c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2208      	movs	r2, #8
 8001a54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	f043 0204 	orr.w	r2, r3, #4
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2204      	movs	r2, #4
 8001a66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00e      	beq.n	8001ab4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2204      	movs	r2, #4
 8001aac:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f853 	bl	8001b5a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d024      	beq.n	8001b08 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01f      	beq.n	8001b08 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2202      	movs	r2, #2
 8001ade:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d01f      	beq.n	8001b52 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01a      	beq.n	8001b52 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2210      	movs	r2, #16
 8001b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f80e 	bl	8001b6e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_DMA2D_ConfigLayer+0x20>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e079      	b.n	8001c98 <HAL_DMA2D_ConfigLayer+0x114>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	3318      	adds	r3, #24
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	041b      	lsls	r3, r3, #16
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001bce:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <HAL_DMA2D_ConfigLayer+0x120>)
 8001bd0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b0a      	cmp	r3, #10
 8001bd8:	d003      	beq.n	8001be2 <HAL_DMA2D_ConfigLayer+0x5e>
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b09      	cmp	r3, #9
 8001be0:	d107      	bne.n	8001bf2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e005      	b.n	8001bfe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	061b      	lsls	r3, r3, #24
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d120      	bne.n	8001c46 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	ea02 0103 	and.w	r1, r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b0a      	cmp	r3, #10
 8001c2c:	d003      	beq.n	8001c36 <HAL_DMA2D_ConfigLayer+0xb2>
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b09      	cmp	r3, #9
 8001c34:	d127      	bne.n	8001c86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
 8001c44:	e01f      	b.n	8001c86 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	ea02 0103 	and.w	r1, r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b0a      	cmp	r3, #10
 8001c6e:	d003      	beq.n	8001c78 <HAL_DMA2D_ConfigLayer+0xf4>
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b09      	cmp	r3, #9
 8001c76:	d106      	bne.n	8001c86 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c84:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	ff03000f 	.word	0xff03000f

08001ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	e177      	b.n	8001fb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	f040 8166 	bne.w	8001fae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d005      	beq.n	8001cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d130      	bne.n	8001d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	2203      	movs	r2, #3
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d30:	2201      	movs	r2, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 0201 	and.w	r2, r3, #1
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d017      	beq.n	8001d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d123      	bne.n	8001dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	220f      	movs	r2, #15
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	08da      	lsrs	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3208      	adds	r2, #8
 8001de6:	69b9      	ldr	r1, [r7, #24]
 8001de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0203 	and.w	r2, r3, #3
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80c0 	beq.w	8001fae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <HAL_GPIO_Init+0x324>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a65      	ldr	r2, [pc, #404]	; (8001fcc <HAL_GPIO_Init+0x324>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b63      	ldr	r3, [pc, #396]	; (8001fcc <HAL_GPIO_Init+0x324>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4a:	4a61      	ldr	r2, [pc, #388]	; (8001fd0 <HAL_GPIO_Init+0x328>)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a58      	ldr	r2, [pc, #352]	; (8001fd4 <HAL_GPIO_Init+0x32c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d037      	beq.n	8001ee6 <HAL_GPIO_Init+0x23e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a57      	ldr	r2, [pc, #348]	; (8001fd8 <HAL_GPIO_Init+0x330>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d031      	beq.n	8001ee2 <HAL_GPIO_Init+0x23a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a56      	ldr	r2, [pc, #344]	; (8001fdc <HAL_GPIO_Init+0x334>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d02b      	beq.n	8001ede <HAL_GPIO_Init+0x236>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a55      	ldr	r2, [pc, #340]	; (8001fe0 <HAL_GPIO_Init+0x338>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d025      	beq.n	8001eda <HAL_GPIO_Init+0x232>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a54      	ldr	r2, [pc, #336]	; (8001fe4 <HAL_GPIO_Init+0x33c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01f      	beq.n	8001ed6 <HAL_GPIO_Init+0x22e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a53      	ldr	r2, [pc, #332]	; (8001fe8 <HAL_GPIO_Init+0x340>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d019      	beq.n	8001ed2 <HAL_GPIO_Init+0x22a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_GPIO_Init+0x344>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0x226>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_GPIO_Init+0x348>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00d      	beq.n	8001eca <HAL_GPIO_Init+0x222>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a50      	ldr	r2, [pc, #320]	; (8001ff4 <HAL_GPIO_Init+0x34c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <HAL_GPIO_Init+0x21e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4f      	ldr	r2, [pc, #316]	; (8001ff8 <HAL_GPIO_Init+0x350>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_GPIO_Init+0x21a>
 8001ebe:	2309      	movs	r3, #9
 8001ec0:	e012      	b.n	8001ee8 <HAL_GPIO_Init+0x240>
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	e010      	b.n	8001ee8 <HAL_GPIO_Init+0x240>
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	e00e      	b.n	8001ee8 <HAL_GPIO_Init+0x240>
 8001eca:	2307      	movs	r3, #7
 8001ecc:	e00c      	b.n	8001ee8 <HAL_GPIO_Init+0x240>
 8001ece:	2306      	movs	r3, #6
 8001ed0:	e00a      	b.n	8001ee8 <HAL_GPIO_Init+0x240>
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	e008      	b.n	8001ee8 <HAL_GPIO_Init+0x240>
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x240>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e004      	b.n	8001ee8 <HAL_GPIO_Init+0x240>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e002      	b.n	8001ee8 <HAL_GPIO_Init+0x240>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_GPIO_Init+0x240>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f002 0203 	and.w	r2, r2, #3
 8001eee:	0092      	lsls	r2, r2, #2
 8001ef0:	4093      	lsls	r3, r2
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef8:	4935      	ldr	r1, [pc, #212]	; (8001fd0 <HAL_GPIO_Init+0x328>)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f06:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <HAL_GPIO_Init+0x354>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2a:	4a34      	ldr	r2, [pc, #208]	; (8001ffc <HAL_GPIO_Init+0x354>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f30:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <HAL_GPIO_Init+0x354>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f54:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <HAL_GPIO_Init+0x354>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_GPIO_Init+0x354>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f7e:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_GPIO_Init+0x354>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_GPIO_Init+0x354>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <HAL_GPIO_Init+0x354>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b0f      	cmp	r3, #15
 8001fb8:	f67f ae84 	bls.w	8001cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40013800 	.word	0x40013800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40021400 	.word	0x40021400
 8001fec:	40021800 	.word	0x40021800
 8001ff0:	40021c00 	.word	0x40021c00
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	40022400 	.word	0x40022400
 8001ffc:	40013c00 	.word	0x40013c00

08002000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e001      	b.n	8002022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
 800203c:	4613      	mov	r3, r2
 800203e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002040:	787b      	ldrb	r3, [r7, #1]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800204c:	e003      	b.n	8002056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	041a      	lsls	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	619a      	str	r2, [r3, #24]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002062:	b480      	push	{r7}
 8002064:	b085      	sub	sp, #20
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002074:	887a      	ldrh	r2, [r7, #2]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	041a      	lsls	r2, r3, #16
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43d9      	mvns	r1, r3
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	400b      	ands	r3, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	619a      	str	r2, [r3, #24]
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 fe24 	bl	8005cfa <USB_GetMode>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	f040 80f6 	bne.w	80022a6 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fe08 	bl	8005cd4 <USB_ReadInterrupts>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80ec 	beq.w	80022a4 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 fdff 	bl	8005cd4 <USB_ReadInterrupts>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020e0:	d104      	bne.n	80020ec <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80020ea:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 fdef 	bl	8005cd4 <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002100:	d104      	bne.n	800210c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800210a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f003 fddf 	bl	8005cd4 <USB_ReadInterrupts>
 8002116:	4603      	mov	r3, r0
 8002118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800211c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002120:	d104      	bne.n	800212c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800212a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f003 fdcf 	bl	8005cd4 <USB_ReadInterrupts>
 8002136:	4603      	mov	r3, r0
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d103      	bne.n	8002148 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2202      	movs	r2, #2
 8002146:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f003 fdc1 	bl	8005cd4 <USB_ReadInterrupts>
 8002152:	4603      	mov	r3, r0
 8002154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800215c:	d11c      	bne.n	8002198 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002166:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10f      	bne.n	8002198 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002178:	2110      	movs	r1, #16
 800217a:	6938      	ldr	r0, [r7, #16]
 800217c:	f003 fcee 	bl	8005b5c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002180:	6938      	ldr	r0, [r7, #16]
 8002182:	f003 fd1f 	bl	8005bc4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2101      	movs	r1, #1
 800218c:	4618      	mov	r0, r3
 800218e:	f003 fdc2 	bl	8005d16 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f005 f8f6 	bl	8007384 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f003 fd99 	bl	8005cd4 <USB_ReadInterrupts>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d102      	bne.n	80021b4 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f001 f829 	bl	8003206 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f003 fd8b 	bl	8005cd4 <USB_ReadInterrupts>
 80021be:	4603      	mov	r3, r0
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d106      	bne.n	80021d6 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f005 f8bf 	bl	800734c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2208      	movs	r2, #8
 80021d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 fd7a 	bl	8005cd4 <USB_ReadInterrupts>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d101      	bne.n	80021ee <HAL_HCD_IRQHandler+0x158>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_HCD_IRQHandler+0x15a>
 80021ee:	2300      	movs	r3, #0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d012      	beq.n	800221a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0210 	bic.w	r2, r2, #16
 8002202:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 ff2c 	bl	8003062 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699a      	ldr	r2, [r3, #24]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0210 	orr.w	r2, r2, #16
 8002218:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fd58 	bl	8005cd4 <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800222e:	d13a      	bne.n	80022a6 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f003 fda8 	bl	8005d8a <USB_HC_ReadInterrupt>
 800223a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e025      	b.n	800228e <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	fa22 f303 	lsr.w	r3, r2, r3
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d018      	beq.n	8002288 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800226c:	d106      	bne.n	800227c <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	4619      	mov	r1, r3
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f836 	bl	80022e6 <HCD_HC_IN_IRQHandler>
 800227a:	e005      	b.n	8002288 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fb84 	bl	8002990 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	429a      	cmp	r2, r3
 8002296:	d3d4      	bcc.n	8002242 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a0:	615a      	str	r2, [r3, #20]
 80022a2:	e000      	b.n	80022a6 <HAL_HCD_IRQHandler+0x210>
      return;
 80022a4:	bf00      	nop
    }
  }
}
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_HCD_Stop+0x16>
 80022be:	2302      	movs	r3, #2
 80022c0:	e00d      	b.n	80022de <HAL_HCD_Stop+0x32>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f003 fe68 	bl	8005fa4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4413      	add	r3, r2
 8002308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b04      	cmp	r3, #4
 8002314:	d11a      	bne.n	800234c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	461a      	mov	r2, r3
 8002324:	2304      	movs	r3, #4
 8002326:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	3361      	adds	r3, #97	; 0x61
 8002336:	2206      	movs	r2, #6
 8002338:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f003 fd31 	bl	8005dac <USB_HC_Halt>
 800234a:	e0af      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002362:	d11b      	bne.n	800239c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4413      	add	r3, r2
 800236c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002370:	461a      	mov	r2, r3
 8002372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002376:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	3361      	adds	r3, #97	; 0x61
 8002386:	2207      	movs	r2, #7
 8002388:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f003 fd09 	bl	8005dac <USB_HC_Halt>
 800239a:	e087      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d109      	bne.n	80023c6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	461a      	mov	r2, r3
 80023c0:	2320      	movs	r3, #32
 80023c2:	6093      	str	r3, [r2, #8]
 80023c4:	e072      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d11a      	bne.n	8002412 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	461a      	mov	r2, r3
 80023ea:	2308      	movs	r3, #8
 80023ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	3361      	adds	r3, #97	; 0x61
 80023fc:	2205      	movs	r2, #5
 80023fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f003 fcce 	bl	8005dac <USB_HC_Halt>
 8002410:	e04c      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002428:	d11b      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	461a      	mov	r2, r3
 8002438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800243c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	3361      	adds	r3, #97	; 0x61
 800244c:	2208      	movs	r2, #8
 800244e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f003 fca6 	bl	8005dac <USB_HC_Halt>
 8002460:	e024      	b.n	80024ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002474:	2b80      	cmp	r3, #128	; 0x80
 8002476:	d119      	bne.n	80024ac <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	212c      	movs	r1, #44	; 0x2c
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	4413      	add	r3, r2
 8002496:	3361      	adds	r3, #97	; 0x61
 8002498:	2206      	movs	r2, #6
 800249a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f003 fc80 	bl	8005dac <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c2:	d112      	bne.n	80024ea <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fc6c 	bl	8005dac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	461a      	mov	r2, r3
 80024e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80024e8:	e24e      	b.n	8002988 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	f040 80df 	bne.w	80026c0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d019      	beq.n	800253e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	3348      	adds	r3, #72	; 0x48
 8002518:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	0159      	lsls	r1, r3, #5
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	440b      	add	r3, r1
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800252c:	1ad2      	subs	r2, r2, r3
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	202c      	movs	r0, #44	; 0x2c
 8002534:	fb00 f303 	mul.w	r3, r0, r3
 8002538:	440b      	add	r3, r1
 800253a:	3350      	adds	r3, #80	; 0x50
 800253c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	3361      	adds	r3, #97	; 0x61
 800254c:	2201      	movs	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	335c      	adds	r3, #92	; 0x5c
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	461a      	mov	r2, r3
 8002570:	2301      	movs	r3, #1
 8002572:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	333f      	adds	r3, #63	; 0x3f
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	333f      	adds	r3, #63	; 0x3f
 8002596:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002598:	2b02      	cmp	r3, #2
 800259a:	d111      	bne.n	80025c0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fc00 	bl	8005dac <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	461a      	mov	r2, r3
 80025ba:	2310      	movs	r3, #16
 80025bc:	6093      	str	r3, [r2, #8]
 80025be:	e03a      	b.n	8002636 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	333f      	adds	r3, #63	; 0x3f
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d009      	beq.n	80025e8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	333f      	adds	r3, #63	; 0x3f
 80025e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d126      	bne.n	8002636 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	0151      	lsls	r1, r2, #5
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	440a      	add	r2, r1
 80025fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002602:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002606:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	3360      	adds	r3, #96	; 0x60
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	b2d9      	uxtb	r1, r3
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	202c      	movs	r0, #44	; 0x2c
 8002624:	fb00 f303 	mul.w	r3, r0, r3
 8002628:	4413      	add	r3, r2
 800262a:	3360      	adds	r3, #96	; 0x60
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f004 feb5 	bl	80073a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d12b      	bne.n	8002696 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3348      	adds	r3, #72	; 0x48
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	202c      	movs	r0, #44	; 0x2c
 8002654:	fb00 f202 	mul.w	r2, r0, r2
 8002658:	440a      	add	r2, r1
 800265a:	3240      	adds	r2, #64	; 0x40
 800265c:	8812      	ldrh	r2, [r2, #0]
 800265e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 818e 	beq.w	8002988 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	3354      	adds	r3, #84	; 0x54
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	f083 0301 	eor.w	r3, r3, #1
 8002680:	b2d8      	uxtb	r0, r3
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	3354      	adds	r3, #84	; 0x54
 8002690:	4602      	mov	r2, r0
 8002692:	701a      	strb	r2, [r3, #0]
}
 8002694:	e178      	b.n	8002988 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	3354      	adds	r3, #84	; 0x54
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	f083 0301 	eor.w	r3, r3, #1
 80026aa:	b2d8      	uxtb	r0, r3
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	3354      	adds	r3, #84	; 0x54
 80026ba:	4602      	mov	r2, r0
 80026bc:	701a      	strb	r2, [r3, #0]
}
 80026be:	e163      	b.n	8002988 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	f040 80f6 	bne.w	80028c4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3361      	adds	r3, #97	; 0x61
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d109      	bne.n	8002700 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	212c      	movs	r1, #44	; 0x2c
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	3360      	adds	r3, #96	; 0x60
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e0c9      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3361      	adds	r3, #97	; 0x61
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b05      	cmp	r3, #5
 8002712:	d109      	bne.n	8002728 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3360      	adds	r3, #96	; 0x60
 8002722:	2205      	movs	r2, #5
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	e0b5      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	3361      	adds	r3, #97	; 0x61
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b06      	cmp	r3, #6
 800273a:	d009      	beq.n	8002750 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	3361      	adds	r3, #97	; 0x61
 800274a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800274c:	2b08      	cmp	r3, #8
 800274e:	d150      	bne.n	80027f2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	212c      	movs	r1, #44	; 0x2c
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	335c      	adds	r3, #92	; 0x5c
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	202c      	movs	r0, #44	; 0x2c
 8002768:	fb00 f303 	mul.w	r3, r0, r3
 800276c:	440b      	add	r3, r1
 800276e:	335c      	adds	r3, #92	; 0x5c
 8002770:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	335c      	adds	r3, #92	; 0x5c
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d912      	bls.n	80027ac <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	335c      	adds	r3, #92	; 0x5c
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	3360      	adds	r3, #96	; 0x60
 80027a6:	2204      	movs	r2, #4
 80027a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027aa:	e073      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	212c      	movs	r1, #44	; 0x2c
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	3360      	adds	r3, #96	; 0x60
 80027ba:	2202      	movs	r2, #2
 80027bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027d4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027dc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	461a      	mov	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027f0:	e050      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3361      	adds	r3, #97	; 0x61
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d122      	bne.n	800284c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3360      	adds	r3, #96	; 0x60
 8002814:	2202      	movs	r2, #2
 8002816:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800282e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002836:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	461a      	mov	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e023      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3361      	adds	r3, #97	; 0x61
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b07      	cmp	r3, #7
 800285e:	d119      	bne.n	8002894 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	335c      	adds	r3, #92	; 0x5c
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	202c      	movs	r0, #44	; 0x2c
 8002878:	fb00 f303 	mul.w	r3, r0, r3
 800287c:	440b      	add	r3, r1
 800287e:	335c      	adds	r3, #92	; 0x5c
 8002880:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3360      	adds	r3, #96	; 0x60
 8002890:	2204      	movs	r2, #4
 8002892:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	461a      	mov	r2, r3
 80028a2:	2302      	movs	r3, #2
 80028a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	b2d9      	uxtb	r1, r3
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	202c      	movs	r0, #44	; 0x2c
 80028b0:	fb00 f303 	mul.w	r3, r0, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3360      	adds	r3, #96	; 0x60
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f004 fd6f 	bl	80073a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028c2:	e061      	b.n	8002988 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d156      	bne.n	8002988 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	333f      	adds	r3, #63	; 0x3f
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d111      	bne.n	8002912 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	335c      	adds	r3, #92	; 0x5c
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fa4e 	bl	8005dac <USB_HC_Halt>
 8002910:	e031      	b.n	8002976 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	333f      	adds	r3, #63	; 0x3f
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	333f      	adds	r3, #63	; 0x3f
 8002934:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002936:	2b02      	cmp	r3, #2
 8002938:	d11d      	bne.n	8002976 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	335c      	adds	r3, #92	; 0x5c
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d110      	bne.n	8002976 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3361      	adds	r3, #97	; 0x61
 8002962:	2203      	movs	r2, #3
 8002964:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f003 fa1b 	bl	8005dac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	461a      	mov	r2, r3
 8002984:	2310      	movs	r3, #16
 8002986:	6093      	str	r3, [r2, #8]
}
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d11a      	bne.n	80029f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	461a      	mov	r2, r3
 80029ce:	2304      	movs	r3, #4
 80029d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	3361      	adds	r3, #97	; 0x61
 80029e0:	2206      	movs	r2, #6
 80029e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 f9dc 	bl	8005dac <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80029f4:	e331      	b.n	800305a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d12e      	bne.n	8002a6a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	333d      	adds	r3, #61	; 0x3d
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	f040 8313 	bne.w	800305a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	333d      	adds	r3, #61	; 0x3d
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3360      	adds	r3, #96	; 0x60
 8002a54:	2202      	movs	r2, #2
 8002a56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 f9a2 	bl	8005dac <USB_HC_Halt>
}
 8002a68:	e2f7      	b.n	800305a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a80:	d112      	bne.n	8002aa8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a94:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 f983 	bl	8005dac <USB_HC_Halt>
}
 8002aa6:	e2d8      	b.n	800305a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d140      	bne.n	8002b40 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	335c      	adds	r3, #92	; 0x5c
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d111      	bne.n	8002b0a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	333d      	adds	r3, #61	; 0x3d
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	461a      	mov	r2, r3
 8002b06:	2340      	movs	r3, #64	; 0x40
 8002b08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b16:	461a      	mov	r2, r3
 8002b18:	2301      	movs	r3, #1
 8002b1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	3361      	adds	r3, #97	; 0x61
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f003 f937 	bl	8005dac <USB_HC_Halt>
}
 8002b3e:	e28c      	b.n	800305a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d12c      	bne.n	8002bb0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3361      	adds	r3, #97	; 0x61
 8002b64:	2204      	movs	r2, #4
 8002b66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	333d      	adds	r3, #61	; 0x3d
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	335c      	adds	r3, #92	; 0x5c
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 f908 	bl	8005dac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2340      	movs	r3, #64	; 0x40
 8002bac:	6093      	str	r3, [r2, #8]
}
 8002bae:	e254      	b.n	800305a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d11a      	bne.n	8002bfc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3361      	adds	r3, #97	; 0x61
 8002be6:	2205      	movs	r2, #5
 8002be8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 f8d9 	bl	8005dac <USB_HC_Halt>
}
 8002bfa:	e22e      	b.n	800305a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d140      	bne.n	8002c94 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	335c      	adds	r3, #92	; 0x5c
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3361      	adds	r3, #97	; 0x61
 8002c32:	2203      	movs	r2, #3
 8002c34:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	333d      	adds	r3, #61	; 0x3d
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d112      	bne.n	8002c70 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	333c      	adds	r3, #60	; 0x3c
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d108      	bne.n	8002c70 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	333d      	adds	r3, #61	; 0x3d
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f003 f896 	bl	8005dac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2310      	movs	r3, #16
 8002c90:	6093      	str	r3, [r2, #8]
}
 8002c92:	e1e2      	b.n	800305a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b80      	cmp	r3, #128	; 0x80
 8002ca8:	d164      	bne.n	8002d74 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d111      	bne.n	8002cd6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3361      	adds	r3, #97	; 0x61
 8002cc0:	2206      	movs	r2, #6
 8002cc2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 f86c 	bl	8005dac <USB_HC_Halt>
 8002cd4:	e044      	b.n	8002d60 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	335c      	adds	r3, #92	; 0x5c
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	202c      	movs	r0, #44	; 0x2c
 8002cee:	fb00 f303 	mul.w	r3, r0, r3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	335c      	adds	r3, #92	; 0x5c
 8002cf6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	335c      	adds	r3, #92	; 0x5c
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d920      	bls.n	8002d4e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	335c      	adds	r3, #92	; 0x5c
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3360      	adds	r3, #96	; 0x60
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	b2d9      	uxtb	r1, r3
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	202c      	movs	r0, #44	; 0x2c
 8002d3a:	fb00 f303 	mul.w	r3, r0, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	3360      	adds	r3, #96	; 0x60
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f004 fb2a 	bl	80073a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d4c:	e008      	b.n	8002d60 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3360      	adds	r3, #96	; 0x60
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	6093      	str	r3, [r2, #8]
}
 8002d72:	e172      	b.n	800305a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8a:	d11b      	bne.n	8002dc4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3361      	adds	r3, #97	; 0x61
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f002 ffff 	bl	8005dac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc0:	6093      	str	r3, [r2, #8]
}
 8002dc2:	e14a      	b.n	800305a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	f040 813f 	bne.w	800305a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3361      	adds	r3, #97	; 0x61
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d17d      	bne.n	8002eec <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3360      	adds	r3, #96	; 0x60
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	333f      	adds	r3, #63	; 0x3f
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d00a      	beq.n	8002e2c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	333f      	adds	r3, #63	; 0x3f
 8002e24:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	f040 8100 	bne.w	800302c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d113      	bne.n	8002e5c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3355      	adds	r3, #85	; 0x55
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	f083 0301 	eor.w	r3, r3, #1
 8002e48:	b2d8      	uxtb	r0, r3
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3355      	adds	r3, #85	; 0x55
 8002e58:	4602      	mov	r2, r0
 8002e5a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	f040 80e3 	bne.w	800302c <HCD_HC_OUT_IRQHandler+0x69c>
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	334c      	adds	r3, #76	; 0x4c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80d8 	beq.w	800302c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	334c      	adds	r3, #76	; 0x4c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	202c      	movs	r0, #44	; 0x2c
 8002e92:	fb00 f202 	mul.w	r2, r0, r2
 8002e96:	440a      	add	r2, r1
 8002e98:	3240      	adds	r2, #64	; 0x40
 8002e9a:	8812      	ldrh	r2, [r2, #0]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	202c      	movs	r0, #44	; 0x2c
 8002ea6:	fb00 f202 	mul.w	r2, r0, r2
 8002eaa:	440a      	add	r2, r1
 8002eac:	3240      	adds	r2, #64	; 0x40
 8002eae:	8812      	ldrh	r2, [r2, #0]
 8002eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80b5 	beq.w	800302c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3355      	adds	r3, #85	; 0x55
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	f083 0301 	eor.w	r3, r3, #1
 8002ed6:	b2d8      	uxtb	r0, r3
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3355      	adds	r3, #85	; 0x55
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e09f      	b.n	800302c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	212c      	movs	r1, #44	; 0x2c
 8002ef2:	fb01 f303 	mul.w	r3, r1, r3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	3361      	adds	r3, #97	; 0x61
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d109      	bne.n	8002f14 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3360      	adds	r3, #96	; 0x60
 8002f0e:	2202      	movs	r2, #2
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	e08b      	b.n	800302c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3361      	adds	r3, #97	; 0x61
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d109      	bne.n	8002f3c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3360      	adds	r3, #96	; 0x60
 8002f36:	2202      	movs	r2, #2
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e077      	b.n	800302c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3361      	adds	r3, #97	; 0x61
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d109      	bne.n	8002f64 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3360      	adds	r3, #96	; 0x60
 8002f5e:	2205      	movs	r2, #5
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	e063      	b.n	800302c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3361      	adds	r3, #97	; 0x61
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b06      	cmp	r3, #6
 8002f76:	d009      	beq.n	8002f8c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3361      	adds	r3, #97	; 0x61
 8002f86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d14f      	bne.n	800302c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	335c      	adds	r3, #92	; 0x5c
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	202c      	movs	r0, #44	; 0x2c
 8002fa4:	fb00 f303 	mul.w	r3, r0, r3
 8002fa8:	440b      	add	r3, r1
 8002faa:	335c      	adds	r3, #92	; 0x5c
 8002fac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	335c      	adds	r3, #92	; 0x5c
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d912      	bls.n	8002fe8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	335c      	adds	r3, #92	; 0x5c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3360      	adds	r3, #96	; 0x60
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e021      	b.n	800302c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3360      	adds	r3, #96	; 0x60
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4413      	add	r3, r2
 8003002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003010:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003018:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003026:	461a      	mov	r2, r3
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	2302      	movs	r3, #2
 800303c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	b2d9      	uxtb	r1, r3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	202c      	movs	r0, #44	; 0x2c
 8003048:	fb00 f303 	mul.w	r3, r0, r3
 800304c:	4413      	add	r3, r2
 800304e:	3360      	adds	r3, #96	; 0x60
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f004 f9a3 	bl	80073a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800305a:	bf00      	nop
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b08a      	sub	sp, #40	; 0x28
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	0c5b      	lsrs	r3, r3, #17
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003096:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d004      	beq.n	80030a8 <HCD_RXQLVL_IRQHandler+0x46>
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b05      	cmp	r3, #5
 80030a2:	f000 80a9 	beq.w	80031f8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80030a6:	e0aa      	b.n	80031fe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80a6 	beq.w	80031fc <HCD_RXQLVL_IRQHandler+0x19a>
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3344      	adds	r3, #68	; 0x44
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 809b 	beq.w	80031fc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3350      	adds	r3, #80	; 0x50
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	441a      	add	r2, r3
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	202c      	movs	r0, #44	; 0x2c
 80030e0:	fb00 f303 	mul.w	r3, r0, r3
 80030e4:	440b      	add	r3, r1
 80030e6:	334c      	adds	r3, #76	; 0x4c
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d87a      	bhi.n	80031e4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3344      	adds	r3, #68	; 0x44
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	b292      	uxth	r2, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f002 fd8c 	bl	8005c24 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	3344      	adds	r3, #68	; 0x44
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	441a      	add	r2, r3
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	202c      	movs	r0, #44	; 0x2c
 8003126:	fb00 f303 	mul.w	r3, r0, r3
 800312a:	440b      	add	r3, r1
 800312c:	3344      	adds	r3, #68	; 0x44
 800312e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	212c      	movs	r1, #44	; 0x2c
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4413      	add	r3, r2
 800313c:	3350      	adds	r3, #80	; 0x50
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	441a      	add	r2, r3
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	202c      	movs	r0, #44	; 0x2c
 800314a:	fb00 f303 	mul.w	r3, r0, r3
 800314e:	440b      	add	r3, r1
 8003150:	3350      	adds	r3, #80	; 0x50
 8003152:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	0cdb      	lsrs	r3, r3, #19
 8003164:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003168:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	3340      	adds	r3, #64	; 0x40
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4293      	cmp	r3, r2
 8003180:	d13c      	bne.n	80031fc <HCD_RXQLVL_IRQHandler+0x19a>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d039      	beq.n	80031fc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800319e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	461a      	mov	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	3354      	adds	r3, #84	; 0x54
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	b2d8      	uxtb	r0, r3
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	3354      	adds	r3, #84	; 0x54
 80031de:	4602      	mov	r2, r0
 80031e0:	701a      	strb	r2, [r3, #0]
      break;
 80031e2:	e00b      	b.n	80031fc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	212c      	movs	r1, #44	; 0x2c
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	4413      	add	r3, r2
 80031f0:	3360      	adds	r3, #96	; 0x60
 80031f2:	2204      	movs	r2, #4
 80031f4:	701a      	strb	r2, [r3, #0]
      break;
 80031f6:	e001      	b.n	80031fc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80031f8:	bf00      	nop
 80031fa:	e000      	b.n	80031fe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80031fc:	bf00      	nop
  }
}
 80031fe:	bf00      	nop
 8003200:	3728      	adds	r7, #40	; 0x28
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b086      	sub	sp, #24
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003232:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b02      	cmp	r3, #2
 800323c:	d10b      	bne.n	8003256 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b01      	cmp	r3, #1
 8003246:	d102      	bne.n	800324e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f004 f88d 	bl	8007368 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b08      	cmp	r3, #8
 800325e:	d132      	bne.n	80032c6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f043 0308 	orr.w	r3, r3, #8
 8003266:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b04      	cmp	r3, #4
 8003270:	d126      	bne.n	80032c0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d113      	bne.n	80032a2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003280:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003284:	d106      	bne.n	8003294 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2102      	movs	r1, #2
 800328c:	4618      	mov	r0, r3
 800328e:	f002 fd42 	bl	8005d16 <USB_InitFSLSPClkSel>
 8003292:	e011      	b.n	80032b8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f002 fd3b 	bl	8005d16 <USB_InitFSLSPClkSel>
 80032a0:	e00a      	b.n	80032b8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d106      	bne.n	80032b8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032b0:	461a      	mov	r2, r3
 80032b2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80032b6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f004 f883 	bl	80073c4 <HAL_HCD_PortEnabled_Callback>
 80032be:	e002      	b.n	80032c6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f004 f88d 	bl	80073e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d103      	bne.n	80032d8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f043 0320 	orr.w	r3, r3, #32
 80032d6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032de:	461a      	mov	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6013      	str	r3, [r2, #0]
}
 80032e4:	bf00      	nop
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e12b      	b.n	8003556 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fd60 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800333e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800334e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003350:	f001 f964 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 8003354:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	4a81      	ldr	r2, [pc, #516]	; (8003560 <HAL_I2C_Init+0x274>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d807      	bhi.n	8003370 <HAL_I2C_Init+0x84>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a80      	ldr	r2, [pc, #512]	; (8003564 <HAL_I2C_Init+0x278>)
 8003364:	4293      	cmp	r3, r2
 8003366:	bf94      	ite	ls
 8003368:	2301      	movls	r3, #1
 800336a:	2300      	movhi	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e006      	b.n	800337e <HAL_I2C_Init+0x92>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a7d      	ldr	r2, [pc, #500]	; (8003568 <HAL_I2C_Init+0x27c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	bf94      	ite	ls
 8003378:	2301      	movls	r3, #1
 800337a:	2300      	movhi	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0e7      	b.n	8003556 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4a78      	ldr	r2, [pc, #480]	; (800356c <HAL_I2C_Init+0x280>)
 800338a:	fba2 2303 	umull	r2, r3, r2, r3
 800338e:	0c9b      	lsrs	r3, r3, #18
 8003390:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a6a      	ldr	r2, [pc, #424]	; (8003560 <HAL_I2C_Init+0x274>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d802      	bhi.n	80033c0 <HAL_I2C_Init+0xd4>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	3301      	adds	r3, #1
 80033be:	e009      	b.n	80033d4 <HAL_I2C_Init+0xe8>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	4a69      	ldr	r2, [pc, #420]	; (8003570 <HAL_I2C_Init+0x284>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	3301      	adds	r3, #1
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	430b      	orrs	r3, r1
 80033da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	495c      	ldr	r1, [pc, #368]	; (8003560 <HAL_I2C_Init+0x274>)
 80033f0:	428b      	cmp	r3, r1
 80033f2:	d819      	bhi.n	8003428 <HAL_I2C_Init+0x13c>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1e59      	subs	r1, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003402:	1c59      	adds	r1, r3, #1
 8003404:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003408:	400b      	ands	r3, r1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_I2C_Init+0x138>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1e59      	subs	r1, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fbb1 f3f3 	udiv	r3, r1, r3
 800341c:	3301      	adds	r3, #1
 800341e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003422:	e051      	b.n	80034c8 <HAL_I2C_Init+0x1dc>
 8003424:	2304      	movs	r3, #4
 8003426:	e04f      	b.n	80034c8 <HAL_I2C_Init+0x1dc>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d111      	bne.n	8003454 <HAL_I2C_Init+0x168>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1e58      	subs	r0, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	440b      	add	r3, r1
 800343e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003442:	3301      	adds	r3, #1
 8003444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e012      	b.n	800347a <HAL_I2C_Init+0x18e>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e58      	subs	r0, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	0099      	lsls	r1, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	fbb0 f3f3 	udiv	r3, r0, r3
 800346a:	3301      	adds	r3, #1
 800346c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Init+0x196>
 800347e:	2301      	movs	r3, #1
 8003480:	e022      	b.n	80034c8 <HAL_I2C_Init+0x1dc>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10e      	bne.n	80034a8 <HAL_I2C_Init+0x1bc>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1e58      	subs	r0, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	440b      	add	r3, r1
 8003498:	fbb0 f3f3 	udiv	r3, r0, r3
 800349c:	3301      	adds	r3, #1
 800349e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a6:	e00f      	b.n	80034c8 <HAL_I2C_Init+0x1dc>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1e58      	subs	r0, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	0099      	lsls	r1, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80034be:	3301      	adds	r3, #1
 80034c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	6809      	ldr	r1, [r1, #0]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69da      	ldr	r2, [r3, #28]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6911      	ldr	r1, [r2, #16]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68d2      	ldr	r2, [r2, #12]
 8003502:	4311      	orrs	r1, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	430b      	orrs	r3, r1
 800350a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	000186a0 	.word	0x000186a0
 8003564:	001e847f 	.word	0x001e847f
 8003568:	003d08ff 	.word	0x003d08ff
 800356c:	431bde83 	.word	0x431bde83
 8003570:	10624dd3 	.word	0x10624dd3

08003574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b20      	cmp	r3, #32
 8003588:	d129      	bne.n	80035de <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2224      	movs	r2, #36	; 0x24
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0210 	bic.w	r2, r2, #16
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b20      	cmp	r3, #32
 8003604:	d12a      	bne.n	800365c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2224      	movs	r2, #36	; 0x24
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003626:	89fb      	ldrh	r3, [r7, #14]
 8003628:	f023 030f 	bic.w	r3, r3, #15
 800362c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	b29a      	uxth	r2, r3
 8003632:	89fb      	ldrh	r3, [r7, #14]
 8003634:	4313      	orrs	r3, r2
 8003636:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	89fa      	ldrh	r2, [r7, #14]
 800363e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0bf      	b.n	80037fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd fc0a 	bl	8000eac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80036ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6999      	ldr	r1, [r3, #24]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80036c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6899      	ldr	r1, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b4a      	ldr	r3, [pc, #296]	; (8003808 <HAL_LTDC_Init+0x19c>)
 80036e0:	400b      	ands	r3, r1
 80036e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6899      	ldr	r1, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68d9      	ldr	r1, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b3e      	ldr	r3, [pc, #248]	; (8003808 <HAL_LTDC_Init+0x19c>)
 800370e:	400b      	ands	r3, r1
 8003710:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68d9      	ldr	r1, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6919      	ldr	r1, [r3, #16]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b33      	ldr	r3, [pc, #204]	; (8003808 <HAL_LTDC_Init+0x19c>)
 800373c:	400b      	ands	r3, r1
 800373e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	041b      	lsls	r3, r3, #16
 8003746:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6919      	ldr	r1, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6959      	ldr	r1, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b27      	ldr	r3, [pc, #156]	; (8003808 <HAL_LTDC_Init+0x19c>)
 800376a:	400b      	ands	r3, r1
 800376c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6959      	ldr	r1, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0206 	orr.w	r2, r2, #6
 80037da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	f000f800 	.word	0xf000f800

0800380c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003822:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	d023      	beq.n	8003876 <HAL_LTDC_IRQHandler+0x6a>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01e      	beq.n	8003876 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2204      	movs	r2, #4
 800384e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2204      	movs	r2, #4
 8003864:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f86f 	bl	8003954 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d023      	beq.n	80038c8 <HAL_LTDC_IRQHandler+0xbc>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01e      	beq.n	80038c8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0202 	bic.w	r2, r2, #2
 8003898:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2202      	movs	r2, #2
 80038a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038a8:	f043 0202 	orr.w	r2, r3, #2
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2204      	movs	r2, #4
 80038b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f846 	bl	8003954 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01b      	beq.n	800390a <HAL_LTDC_IRQHandler+0xfe>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d016      	beq.n	800390a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2201      	movs	r2, #1
 80038f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f82f 	bl	8003968 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01b      	beq.n	800394c <HAL_LTDC_IRQHandler+0x140>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0208 	bic.w	r2, r2, #8
 800392c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2208      	movs	r2, #8
 8003934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f818 	bl	800397c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_LTDC_ConfigLayer+0x1a>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e02c      	b.n	8003a04 <HAL_LTDC_ConfigLayer+0x74>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2134      	movs	r1, #52	; 0x34
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4614      	mov	r4, r2
 80039ce:	461d      	mov	r5, r3
 80039d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f811 	bl	8003a0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bdb0      	pop	{r4, r5, r7, pc}

08003a0c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	; 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	0c1b      	lsrs	r3, r3, #16
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	4413      	add	r3, r2
 8003a2a:	041b      	lsls	r3, r3, #16
 8003a2c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	01db      	lsls	r3, r3, #7
 8003a38:	4413      	add	r3, r2
 8003a3a:	3384      	adds	r3, #132	; 0x84
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	4611      	mov	r1, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	01d2      	lsls	r2, r2, #7
 8003a48:	440a      	add	r2, r1
 8003a4a:	3284      	adds	r2, #132	; 0x84
 8003a4c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a50:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a62:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a64:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	01db      	lsls	r3, r3, #7
 8003a70:	440b      	add	r3, r1
 8003a72:	3384      	adds	r3, #132	; 0x84
 8003a74:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a7a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a8a:	4413      	add	r3, r2
 8003a8c:	041b      	lsls	r3, r3, #16
 8003a8e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	01db      	lsls	r3, r3, #7
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3384      	adds	r3, #132	; 0x84
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	01d2      	lsls	r2, r2, #7
 8003aaa:	440a      	add	r2, r1
 8003aac:	3284      	adds	r2, #132	; 0x84
 8003aae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ab2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac2:	4413      	add	r3, r2
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	01db      	lsls	r3, r3, #7
 8003ad0:	440b      	add	r3, r1
 8003ad2:	3384      	adds	r3, #132	; 0x84
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	01db      	lsls	r3, r3, #7
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3384      	adds	r3, #132	; 0x84
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	4611      	mov	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	01d2      	lsls	r2, r2, #7
 8003af6:	440a      	add	r2, r1
 8003af8:	3284      	adds	r2, #132	; 0x84
 8003afa:	f023 0307 	bic.w	r3, r3, #7
 8003afe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	01db      	lsls	r3, r3, #7
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3384      	adds	r3, #132	; 0x84
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	01db      	lsls	r3, r3, #7
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3384      	adds	r3, #132	; 0x84
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	01db      	lsls	r3, r3, #7
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3384      	adds	r3, #132	; 0x84
 8003b50:	461a      	mov	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	01db      	lsls	r3, r3, #7
 8003b70:	440b      	add	r3, r1
 8003b72:	3384      	adds	r3, #132	; 0x84
 8003b74:	4619      	mov	r1, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	01db      	lsls	r3, r3, #7
 8003b86:	4413      	add	r3, r2
 8003b88:	3384      	adds	r3, #132	; 0x84
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	4611      	mov	r1, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	01d2      	lsls	r2, r2, #7
 8003b96:	440a      	add	r2, r1
 8003b98:	3284      	adds	r2, #132	; 0x84
 8003b9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	01db      	lsls	r3, r3, #7
 8003baa:	4413      	add	r3, r2
 8003bac:	3384      	adds	r3, #132	; 0x84
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	01db      	lsls	r3, r3, #7
 8003bc0:	4413      	add	r3, r2
 8003bc2:	3384      	adds	r3, #132	; 0x84
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	4611      	mov	r1, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	01d2      	lsls	r2, r2, #7
 8003bd0:	440a      	add	r2, r1
 8003bd2:	3284      	adds	r2, #132	; 0x84
 8003bd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bd8:	f023 0307 	bic.w	r3, r3, #7
 8003bdc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	69da      	ldr	r2, [r3, #28]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	68f9      	ldr	r1, [r7, #12]
 8003be8:	6809      	ldr	r1, [r1, #0]
 8003bea:	4608      	mov	r0, r1
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	01c9      	lsls	r1, r1, #7
 8003bf0:	4401      	add	r1, r0
 8003bf2:	3184      	adds	r1, #132	; 0x84
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	01db      	lsls	r3, r3, #7
 8003c02:	4413      	add	r3, r2
 8003c04:	3384      	adds	r3, #132	; 0x84
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	01db      	lsls	r3, r3, #7
 8003c12:	4413      	add	r3, r2
 8003c14:	3384      	adds	r3, #132	; 0x84
 8003c16:	461a      	mov	r2, r3
 8003c18:	2300      	movs	r3, #0
 8003c1a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	01db      	lsls	r3, r3, #7
 8003c26:	4413      	add	r3, r2
 8003c28:	3384      	adds	r3, #132	; 0x84
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	e01b      	b.n	8003c78 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d102      	bne.n	8003c4e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	e014      	b.n	8003c78 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d00b      	beq.n	8003c6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d007      	beq.n	8003c6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d003      	beq.n	8003c6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c6a:	2b07      	cmp	r3, #7
 8003c6c:	d102      	bne.n	8003c74 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e001      	b.n	8003c78 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003c74:	2301      	movs	r3, #1
 8003c76:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	01db      	lsls	r3, r3, #7
 8003c82:	4413      	add	r3, r2
 8003c84:	3384      	adds	r3, #132	; 0x84
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	01d2      	lsls	r2, r2, #7
 8003c92:	440a      	add	r2, r1
 8003c94:	3284      	adds	r2, #132	; 0x84
 8003c96:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	69fa      	ldr	r2, [r7, #28]
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	1acb      	subs	r3, r1, r3
 8003cb2:	69f9      	ldr	r1, [r7, #28]
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	6809      	ldr	r1, [r1, #0]
 8003cbe:	4608      	mov	r0, r1
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	01c9      	lsls	r1, r1, #7
 8003cc4:	4401      	add	r1, r0
 8003cc6:	3184      	adds	r1, #132	; 0x84
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	01db      	lsls	r3, r3, #7
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3384      	adds	r3, #132	; 0x84
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	01d2      	lsls	r2, r2, #7
 8003ce6:	440a      	add	r2, r1
 8003ce8:	3284      	adds	r2, #132	; 0x84
 8003cea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003cee:	f023 0307 	bic.w	r3, r3, #7
 8003cf2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	01db      	lsls	r3, r3, #7
 8003cfe:	4413      	add	r3, r2
 8003d00:	3384      	adds	r3, #132	; 0x84
 8003d02:	461a      	mov	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	01db      	lsls	r3, r3, #7
 8003d14:	4413      	add	r3, r2
 8003d16:	3384      	adds	r3, #132	; 0x84
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	01d2      	lsls	r2, r2, #7
 8003d24:	440a      	add	r2, r1
 8003d26:	3284      	adds	r2, #132	; 0x84
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6013      	str	r3, [r2, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	3724      	adds	r7, #36	; 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e267      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d075      	beq.n	8003e46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d5a:	4b88      	ldr	r3, [pc, #544]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d00c      	beq.n	8003d80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d66:	4b85      	ldr	r3, [pc, #532]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d112      	bne.n	8003d98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d72:	4b82      	ldr	r3, [pc, #520]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7e:	d10b      	bne.n	8003d98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d80:	4b7e      	ldr	r3, [pc, #504]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d05b      	beq.n	8003e44 <HAL_RCC_OscConfig+0x108>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d157      	bne.n	8003e44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e242      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da0:	d106      	bne.n	8003db0 <HAL_RCC_OscConfig+0x74>
 8003da2:	4b76      	ldr	r3, [pc, #472]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a75      	ldr	r2, [pc, #468]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e01d      	b.n	8003dec <HAL_RCC_OscConfig+0xb0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x98>
 8003dba:	4b70      	ldr	r3, [pc, #448]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6f      	ldr	r2, [pc, #444]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b6d      	ldr	r3, [pc, #436]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6c      	ldr	r2, [pc, #432]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0xb0>
 8003dd4:	4b69      	ldr	r3, [pc, #420]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a68      	ldr	r2, [pc, #416]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b66      	ldr	r3, [pc, #408]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a65      	ldr	r2, [pc, #404]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7fd fc3e 	bl	8001674 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fd fc3a 	bl	8001674 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e207      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	4b5b      	ldr	r3, [pc, #364]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0xc0>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fd fc2a 	bl	8001674 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fd fc26 	bl	8001674 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e1f3      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	4b51      	ldr	r3, [pc, #324]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0xe8>
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d063      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e52:	4b4a      	ldr	r3, [pc, #296]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5e:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d11c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6a:	4b44      	ldr	r3, [pc, #272]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d116      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e76:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_RCC_OscConfig+0x152>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e1c7      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b3b      	ldr	r3, [pc, #236]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4937      	ldr	r1, [pc, #220]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	e03a      	b.n	8003f1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eac:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <HAL_RCC_OscConfig+0x244>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb2:	f7fd fbdf 	bl	8001674 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eba:	f7fd fbdb 	bl	8001674 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1a8      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	4b2b      	ldr	r3, [pc, #172]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b28      	ldr	r3, [pc, #160]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4925      	ldr	r1, [pc, #148]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <HAL_RCC_OscConfig+0x244>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fbbe 	bl	8001674 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efc:	f7fd fbba 	bl	8001674 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e187      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d036      	beq.n	8003f94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2e:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <HAL_RCC_OscConfig+0x248>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fd fb9e 	bl	8001674 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7fd fb9a 	bl	8001674 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e167      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_OscConfig+0x240>)
 8003f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x200>
 8003f5a:	e01b      	b.n	8003f94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCC_OscConfig+0x248>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f62:	f7fd fb87 	bl	8001674 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	e00e      	b.n	8003f88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6a:	f7fd fb83 	bl	8001674 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d907      	bls.n	8003f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e150      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	42470000 	.word	0x42470000
 8003f84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f88:	4b88      	ldr	r3, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8003f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1ea      	bne.n	8003f6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8097 	beq.w	80040d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fa6:	4b81      	ldr	r3, [pc, #516]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	4b7d      	ldr	r3, [pc, #500]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	4a7c      	ldr	r2, [pc, #496]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8003fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc2:	4b7a      	ldr	r3, [pc, #488]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd2:	4b77      	ldr	r3, [pc, #476]	; (80041b0 <HAL_RCC_OscConfig+0x474>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d118      	bne.n	8004010 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fde:	4b74      	ldr	r3, [pc, #464]	; (80041b0 <HAL_RCC_OscConfig+0x474>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a73      	ldr	r2, [pc, #460]	; (80041b0 <HAL_RCC_OscConfig+0x474>)
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fea:	f7fd fb43 	bl	8001674 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff2:	f7fd fb3f 	bl	8001674 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e10c      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	4b6a      	ldr	r3, [pc, #424]	; (80041b0 <HAL_RCC_OscConfig+0x474>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x2ea>
 8004018:	4b64      	ldr	r3, [pc, #400]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	4a63      	ldr	r2, [pc, #396]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	; 0x70
 8004024:	e01c      	b.n	8004060 <HAL_RCC_OscConfig+0x324>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0x30c>
 800402e:	4b5f      	ldr	r3, [pc, #380]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	4a5e      	ldr	r2, [pc, #376]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	6713      	str	r3, [r2, #112]	; 0x70
 800403a:	4b5c      	ldr	r3, [pc, #368]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a5b      	ldr	r2, [pc, #364]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
 8004046:	e00b      	b.n	8004060 <HAL_RCC_OscConfig+0x324>
 8004048:	4b58      	ldr	r3, [pc, #352]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	4a57      	ldr	r2, [pc, #348]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	6713      	str	r3, [r2, #112]	; 0x70
 8004054:	4b55      	ldr	r3, [pc, #340]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	4a54      	ldr	r2, [pc, #336]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 800405a:	f023 0304 	bic.w	r3, r3, #4
 800405e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fd fb04 	bl	8001674 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	e00a      	b.n	8004086 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004070:	f7fd fb00 	bl	8001674 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e0cb      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004086:	4b49      	ldr	r3, [pc, #292]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0ee      	beq.n	8004070 <HAL_RCC_OscConfig+0x334>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004094:	f7fd faee 	bl	8001674 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fd faea 	bl	8001674 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0b5      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b2:	4b3e      	ldr	r3, [pc, #248]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1ee      	bne.n	800409c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c4:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	4a38      	ldr	r2, [pc, #224]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 80040ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80a1 	beq.w	800421c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040da:	4b34      	ldr	r3, [pc, #208]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d05c      	beq.n	80041a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d141      	bne.n	8004172 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b31      	ldr	r3, [pc, #196]	; (80041b4 <HAL_RCC_OscConfig+0x478>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fd fabe 	bl	8001674 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040fc:	f7fd faba 	bl	8001674 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e087      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	4b27      	ldr	r3, [pc, #156]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	019b      	lsls	r3, r3, #6
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	085b      	lsrs	r3, r3, #1
 8004132:	3b01      	subs	r3, #1
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	491b      	ldr	r1, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x478>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fd fa93 	bl	8001674 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004152:	f7fd fa8f 	bl	8001674 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e05c      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004164:	4b11      	ldr	r3, [pc, #68]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x416>
 8004170:	e054      	b.n	800421c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_RCC_OscConfig+0x478>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fd fa7c 	bl	8001674 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004180:	f7fd fa78 	bl	8001674 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e045      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCC_OscConfig+0x470>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x444>
 800419e:	e03d      	b.n	800421c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e038      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40007000 	.word	0x40007000
 80041b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041b8:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <HAL_RCC_OscConfig+0x4ec>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d028      	beq.n	8004218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d121      	bne.n	8004218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d11a      	bne.n	8004218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041e8:	4013      	ands	r3, r2
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d111      	bne.n	8004218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	3b01      	subs	r3, #1
 8004202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d107      	bne.n	8004218 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023800 	.word	0x40023800

0800422c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0cc      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b68      	ldr	r3, [pc, #416]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d90c      	bls.n	8004268 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b65      	ldr	r3, [pc, #404]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b63      	ldr	r3, [pc, #396]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0b8      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d020      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004280:	4b59      	ldr	r3, [pc, #356]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	4a58      	ldr	r2, [pc, #352]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800428a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004298:	4b53      	ldr	r3, [pc, #332]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4a52      	ldr	r2, [pc, #328]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a4:	4b50      	ldr	r3, [pc, #320]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	494d      	ldr	r1, [pc, #308]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d044      	beq.n	800434c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d107      	bne.n	80042da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ca:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d119      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e07f      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d003      	beq.n	80042ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d107      	bne.n	80042fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ea:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e06f      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fa:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e067      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800430a:	4b37      	ldr	r3, [pc, #220]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f023 0203 	bic.w	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4934      	ldr	r1, [pc, #208]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800431c:	f7fd f9aa 	bl	8001674 <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	e00a      	b.n	800433a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004324:	f7fd f9a6 	bl	8001674 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e04f      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433a:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 020c 	and.w	r2, r3, #12
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	429a      	cmp	r2, r3
 800434a:	d1eb      	bne.n	8004324 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800434c:	4b25      	ldr	r3, [pc, #148]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d20c      	bcs.n	8004374 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004362:	4b20      	ldr	r3, [pc, #128]	; (80043e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d001      	beq.n	8004374 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e032      	b.n	80043da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004380:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4916      	ldr	r1, [pc, #88]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	490e      	ldr	r1, [pc, #56]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043b2:	f000 f821 	bl	80043f8 <HAL_RCC_GetSysClockFreq>
 80043b6:	4602      	mov	r2, r0
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	490a      	ldr	r1, [pc, #40]	; (80043ec <HAL_RCC_ClockConfig+0x1c0>)
 80043c4:	5ccb      	ldrb	r3, [r1, r3]
 80043c6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <HAL_RCC_ClockConfig+0x1c4>)
 80043cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <HAL_RCC_ClockConfig+0x1c8>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd f804 	bl	80013e0 <HAL_InitTick>

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40023c00 	.word	0x40023c00
 80043e8:	40023800 	.word	0x40023800
 80043ec:	08007524 	.word	0x08007524
 80043f0:	20000000 	.word	0x20000000
 80043f4:	20000004 	.word	0x20000004

080043f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043fc:	b094      	sub	sp, #80	; 0x50
 80043fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	647b      	str	r3, [r7, #68]	; 0x44
 8004404:	2300      	movs	r3, #0
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004408:	2300      	movs	r3, #0
 800440a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004410:	4b79      	ldr	r3, [pc, #484]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 030c 	and.w	r3, r3, #12
 8004418:	2b08      	cmp	r3, #8
 800441a:	d00d      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x40>
 800441c:	2b08      	cmp	r3, #8
 800441e:	f200 80e1 	bhi.w	80045e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x34>
 8004426:	2b04      	cmp	r3, #4
 8004428:	d003      	beq.n	8004432 <HAL_RCC_GetSysClockFreq+0x3a>
 800442a:	e0db      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800442c:	4b73      	ldr	r3, [pc, #460]	; (80045fc <HAL_RCC_GetSysClockFreq+0x204>)
 800442e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004430:	e0db      	b.n	80045ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004432:	4b73      	ldr	r3, [pc, #460]	; (8004600 <HAL_RCC_GetSysClockFreq+0x208>)
 8004434:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004436:	e0d8      	b.n	80045ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004438:	4b6f      	ldr	r3, [pc, #444]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004440:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004442:	4b6d      	ldr	r3, [pc, #436]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d063      	beq.n	8004516 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444e:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	099b      	lsrs	r3, r3, #6
 8004454:	2200      	movs	r2, #0
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
 8004458:	63fa      	str	r2, [r7, #60]	; 0x3c
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004460:	633b      	str	r3, [r7, #48]	; 0x30
 8004462:	2300      	movs	r3, #0
 8004464:	637b      	str	r3, [r7, #52]	; 0x34
 8004466:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800446a:	4622      	mov	r2, r4
 800446c:	462b      	mov	r3, r5
 800446e:	f04f 0000 	mov.w	r0, #0
 8004472:	f04f 0100 	mov.w	r1, #0
 8004476:	0159      	lsls	r1, r3, #5
 8004478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800447c:	0150      	lsls	r0, r2, #5
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4621      	mov	r1, r4
 8004484:	1a51      	subs	r1, r2, r1
 8004486:	6139      	str	r1, [r7, #16]
 8004488:	4629      	mov	r1, r5
 800448a:	eb63 0301 	sbc.w	r3, r3, r1
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800449c:	4659      	mov	r1, fp
 800449e:	018b      	lsls	r3, r1, #6
 80044a0:	4651      	mov	r1, sl
 80044a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044a6:	4651      	mov	r1, sl
 80044a8:	018a      	lsls	r2, r1, #6
 80044aa:	4651      	mov	r1, sl
 80044ac:	ebb2 0801 	subs.w	r8, r2, r1
 80044b0:	4659      	mov	r1, fp
 80044b2:	eb63 0901 	sbc.w	r9, r3, r1
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ca:	4690      	mov	r8, r2
 80044cc:	4699      	mov	r9, r3
 80044ce:	4623      	mov	r3, r4
 80044d0:	eb18 0303 	adds.w	r3, r8, r3
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	462b      	mov	r3, r5
 80044d8:	eb49 0303 	adc.w	r3, r9, r3
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044ea:	4629      	mov	r1, r5
 80044ec:	024b      	lsls	r3, r1, #9
 80044ee:	4621      	mov	r1, r4
 80044f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044f4:	4621      	mov	r1, r4
 80044f6:	024a      	lsls	r2, r1, #9
 80044f8:	4610      	mov	r0, r2
 80044fa:	4619      	mov	r1, r3
 80044fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fe:	2200      	movs	r2, #0
 8004500:	62bb      	str	r3, [r7, #40]	; 0x28
 8004502:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004504:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004508:	f7fb fe7a 	bl	8000200 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4613      	mov	r3, r2
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004514:	e058      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004516:	4b38      	ldr	r3, [pc, #224]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	099b      	lsrs	r3, r3, #6
 800451c:	2200      	movs	r2, #0
 800451e:	4618      	mov	r0, r3
 8004520:	4611      	mov	r1, r2
 8004522:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004526:	623b      	str	r3, [r7, #32]
 8004528:	2300      	movs	r3, #0
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
 800452c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004530:	4642      	mov	r2, r8
 8004532:	464b      	mov	r3, r9
 8004534:	f04f 0000 	mov.w	r0, #0
 8004538:	f04f 0100 	mov.w	r1, #0
 800453c:	0159      	lsls	r1, r3, #5
 800453e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004542:	0150      	lsls	r0, r2, #5
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4641      	mov	r1, r8
 800454a:	ebb2 0a01 	subs.w	sl, r2, r1
 800454e:	4649      	mov	r1, r9
 8004550:	eb63 0b01 	sbc.w	fp, r3, r1
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004560:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004564:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004568:	ebb2 040a 	subs.w	r4, r2, sl
 800456c:	eb63 050b 	sbc.w	r5, r3, fp
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	00eb      	lsls	r3, r5, #3
 800457a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800457e:	00e2      	lsls	r2, r4, #3
 8004580:	4614      	mov	r4, r2
 8004582:	461d      	mov	r5, r3
 8004584:	4643      	mov	r3, r8
 8004586:	18e3      	adds	r3, r4, r3
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	464b      	mov	r3, r9
 800458c:	eb45 0303 	adc.w	r3, r5, r3
 8004590:	607b      	str	r3, [r7, #4]
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800459e:	4629      	mov	r1, r5
 80045a0:	028b      	lsls	r3, r1, #10
 80045a2:	4621      	mov	r1, r4
 80045a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045a8:	4621      	mov	r1, r4
 80045aa:	028a      	lsls	r2, r1, #10
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b2:	2200      	movs	r2, #0
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	61fa      	str	r2, [r7, #28]
 80045b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045bc:	f7fb fe20 	bl	8000200 <__aeabi_uldivmod>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4613      	mov	r3, r2
 80045c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	3301      	adds	r3, #1
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045e2:	e002      	b.n	80045ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetSysClockFreq+0x204>)
 80045e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3750      	adds	r7, #80	; 0x50
 80045f0:	46bd      	mov	sp, r7
 80045f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f6:	bf00      	nop
 80045f8:	40023800 	.word	0x40023800
 80045fc:	00f42400 	.word	0x00f42400
 8004600:	007a1200 	.word	0x007a1200

08004604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004608:	4b03      	ldr	r3, [pc, #12]	; (8004618 <HAL_RCC_GetHCLKFreq+0x14>)
 800460a:	681b      	ldr	r3, [r3, #0]
}
 800460c:	4618      	mov	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	20000000 	.word	0x20000000

0800461c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004620:	f7ff fff0 	bl	8004604 <HAL_RCC_GetHCLKFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	0a9b      	lsrs	r3, r3, #10
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	4903      	ldr	r1, [pc, #12]	; (8004640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40023800 	.word	0x40023800
 8004640:	08007534 	.word	0x08007534

08004644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004648:	f7ff ffdc 	bl	8004604 <HAL_RCC_GetHCLKFreq>
 800464c:	4602      	mov	r2, r0
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	0b5b      	lsrs	r3, r3, #13
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	4903      	ldr	r1, [pc, #12]	; (8004668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800465a:	5ccb      	ldrb	r3, [r1, r3]
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40023800 	.word	0x40023800
 8004668:	08007534 	.word	0x08007534

0800466c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	220f      	movs	r2, #15
 800467a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0203 	and.w	r2, r3, #3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <HAL_RCC_GetClockConfig+0x60>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 020f 	and.w	r2, r3, #15
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40023c00 	.word	0x40023c00

080046d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10b      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004700:	2b00      	cmp	r3, #0
 8004702:	d075      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004704:	4b91      	ldr	r3, [pc, #580]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800470a:	f7fc ffb3 	bl	8001674 <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004710:	e008      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004712:	f7fc ffaf 	bl	8001674 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e189      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004724:	4b8a      	ldr	r3, [pc, #552]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f0      	bne.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	019a      	lsls	r2, r3, #6
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	071b      	lsls	r3, r3, #28
 8004748:	4981      	ldr	r1, [pc, #516]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01f      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800475c:	4b7c      	ldr	r3, [pc, #496]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800475e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004762:	0f1b      	lsrs	r3, r3, #28
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	019a      	lsls	r2, r3, #6
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	431a      	orrs	r2, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	071b      	lsls	r3, r3, #28
 800477c:	4974      	ldr	r1, [pc, #464]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004784:	4b72      	ldr	r3, [pc, #456]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478a:	f023 021f 	bic.w	r2, r3, #31
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	3b01      	subs	r3, #1
 8004794:	496e      	ldr	r1, [pc, #440]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	019a      	lsls	r2, r3, #6
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	061b      	lsls	r3, r3, #24
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	071b      	lsls	r3, r3, #28
 80047bc:	4964      	ldr	r1, [pc, #400]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047c4:	4b61      	ldr	r3, [pc, #388]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047ca:	f7fc ff53 	bl	8001674 <HAL_GetTick>
 80047ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047d2:	f7fc ff4f 	bl	8001674 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e129      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047e4:	4b5a      	ldr	r3, [pc, #360]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d105      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004804:	2b00      	cmp	r3, #0
 8004806:	d079      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004808:	4b52      	ldr	r3, [pc, #328]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800480e:	f7fc ff31 	bl	8001674 <HAL_GetTick>
 8004812:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004816:	f7fc ff2d 	bl	8001674 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e107      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004828:	4b49      	ldr	r3, [pc, #292]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004834:	d0ef      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d020      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004842:	4b43      	ldr	r3, [pc, #268]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004848:	0f1b      	lsrs	r3, r3, #28
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	019a      	lsls	r2, r3, #6
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	061b      	lsls	r3, r3, #24
 800485c:	431a      	orrs	r2, r3
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	071b      	lsls	r3, r3, #28
 8004862:	493b      	ldr	r1, [pc, #236]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800486a:	4b39      	ldr	r3, [pc, #228]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800486c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004870:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	3b01      	subs	r3, #1
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	4934      	ldr	r1, [pc, #208]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01e      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004890:	4b2f      	ldr	r3, [pc, #188]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	0e1b      	lsrs	r3, r3, #24
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	019a      	lsls	r2, r3, #6
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	061b      	lsls	r3, r3, #24
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	071b      	lsls	r3, r3, #28
 80048b0:	4927      	ldr	r1, [pc, #156]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	4922      	ldr	r1, [pc, #136]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80048ce:	4b21      	ldr	r3, [pc, #132]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048d4:	f7fc fece 	bl	8001674 <HAL_GetTick>
 80048d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80048dc:	f7fc feca 	bl	8001674 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e0a4      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048fa:	d1ef      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 808b 	beq.w	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004918:	6413      	str	r3, [r2, #64]	; 0x40
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a0b      	ldr	r2, [pc, #44]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800492c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004930:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004932:	f7fc fe9f 	bl	8001674 <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004938:	e010      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800493a:	f7fc fe9b 	bl	8001674 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d909      	bls.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e075      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800494c:	42470068 	.word	0x42470068
 8004950:	40023800 	.word	0x40023800
 8004954:	42470070 	.word	0x42470070
 8004958:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800495c:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0e8      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004968:	4b36      	ldr	r3, [pc, #216]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004970:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d02f      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	429a      	cmp	r2, r3
 8004984:	d028      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004986:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004990:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004992:	2201      	movs	r2, #1
 8004994:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004996:	4b2c      	ldr	r3, [pc, #176]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800499c:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049a2:	4b28      	ldr	r3, [pc, #160]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d114      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80049ae:	f7fc fe61 	bl	8001674 <HAL_GetTick>
 80049b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b4:	e00a      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fc fe5d 	bl	8001674 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e035      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0ee      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049e4:	d10d      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80049e6:	4b17      	ldr	r3, [pc, #92]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fa:	4912      	ldr	r1, [pc, #72]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	608b      	str	r3, [r1, #8]
 8004a00:	e005      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004a02:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	4a0f      	ldr	r2, [pc, #60]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a08:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a0c:	6093      	str	r3, [r2, #8]
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1a:	490a      	ldr	r1, [pc, #40]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004a32:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004a34:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40007000 	.word	0x40007000
 8004a44:	40023800 	.word	0x40023800
 8004a48:	42470e40 	.word	0x42470e40
 8004a4c:	424711e0 	.word	0x424711e0

08004a50 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e025      	b.n	8004ab0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7fc fca7 	bl	80013cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f000 ff7b 	bl	800598c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6839      	ldr	r1, [r7, #0]
 8004aa2:	f000 ffd0 	bl	8005a46 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e07b      	b.n	8004bc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d108      	bne.n	8004ae4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ada:	d009      	beq.n	8004af0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61da      	str	r2, [r3, #28]
 8004ae2:	e005      	b.n	8004af0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fc fafe 	bl	800110c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	ea42 0103 	orr.w	r1, r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	0c1b      	lsrs	r3, r3, #16
 8004b8e:	f003 0104 	and.w	r1, r3, #4
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b96:	f003 0210 	and.w	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e041      	b.n	8004c60 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7fc fad3 	bl	800119c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3304      	adds	r3, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f000 f9cd 	bl	8004fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d001      	beq.n	8004c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e04e      	b.n	8004d1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a23      	ldr	r2, [pc, #140]	; (8004d2c <HAL_TIM_Base_Start_IT+0xc4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d022      	beq.n	8004ce8 <HAL_TIM_Base_Start_IT+0x80>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004caa:	d01d      	beq.n	8004ce8 <HAL_TIM_Base_Start_IT+0x80>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d018      	beq.n	8004ce8 <HAL_TIM_Base_Start_IT+0x80>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <HAL_TIM_Base_Start_IT+0xcc>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d013      	beq.n	8004ce8 <HAL_TIM_Base_Start_IT+0x80>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00e      	beq.n	8004ce8 <HAL_TIM_Base_Start_IT+0x80>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1b      	ldr	r2, [pc, #108]	; (8004d3c <HAL_TIM_Base_Start_IT+0xd4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d009      	beq.n	8004ce8 <HAL_TIM_Base_Start_IT+0x80>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d004      	beq.n	8004ce8 <HAL_TIM_Base_Start_IT+0x80>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d111      	bne.n	8004d0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b06      	cmp	r3, #6
 8004cf8:	d010      	beq.n	8004d1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0a:	e007      	b.n	8004d1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40010400 	.word	0x40010400
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40001800 	.word	0x40001800

08004d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d122      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d11b      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0202 	mvn.w	r2, #2
 8004d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f8ee 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f8e0 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f8f1 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d122      	bne.n	8004df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d11b      	bne.n	8004df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0204 	mvn.w	r2, #4
 8004dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8c4 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004de4:	e005      	b.n	8004df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8b6 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8c7 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d122      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d11b      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0208 	mvn.w	r2, #8
 8004e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f89a 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004e38:	e005      	b.n	8004e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f88c 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f89d 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	2b10      	cmp	r3, #16
 8004e58:	d122      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d11b      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0210 	mvn.w	r2, #16
 8004e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2208      	movs	r2, #8
 8004e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f870 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f862 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f873 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d10e      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0201 	mvn.w	r2, #1
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fb fef8 	bl	8000cbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed6:	2b80      	cmp	r3, #128	; 0x80
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d107      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f97e 	bl	80051f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d10e      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d107      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f838 	bl	8004f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d10e      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d107      	bne.n	8004f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0220 	mvn.w	r2, #32
 8004f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f948 	bl	80051e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a40      	ldr	r2, [pc, #256]	; (80050bc <TIM_Base_SetConfig+0x114>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc6:	d00f      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a3d      	ldr	r2, [pc, #244]	; (80050c0 <TIM_Base_SetConfig+0x118>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a3c      	ldr	r2, [pc, #240]	; (80050c4 <TIM_Base_SetConfig+0x11c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a3b      	ldr	r2, [pc, #236]	; (80050c8 <TIM_Base_SetConfig+0x120>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a3a      	ldr	r2, [pc, #232]	; (80050cc <TIM_Base_SetConfig+0x124>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d108      	bne.n	8004ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2f      	ldr	r2, [pc, #188]	; (80050bc <TIM_Base_SetConfig+0x114>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d02b      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d027      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2c      	ldr	r2, [pc, #176]	; (80050c0 <TIM_Base_SetConfig+0x118>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d023      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2b      	ldr	r2, [pc, #172]	; (80050c4 <TIM_Base_SetConfig+0x11c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d01f      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2a      	ldr	r2, [pc, #168]	; (80050c8 <TIM_Base_SetConfig+0x120>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01b      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a29      	ldr	r2, [pc, #164]	; (80050cc <TIM_Base_SetConfig+0x124>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d017      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a28      	ldr	r2, [pc, #160]	; (80050d0 <TIM_Base_SetConfig+0x128>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a27      	ldr	r2, [pc, #156]	; (80050d4 <TIM_Base_SetConfig+0x12c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00f      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a26      	ldr	r2, [pc, #152]	; (80050d8 <TIM_Base_SetConfig+0x130>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00b      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a25      	ldr	r2, [pc, #148]	; (80050dc <TIM_Base_SetConfig+0x134>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d007      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a24      	ldr	r2, [pc, #144]	; (80050e0 <TIM_Base_SetConfig+0x138>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a23      	ldr	r2, [pc, #140]	; (80050e4 <TIM_Base_SetConfig+0x13c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d108      	bne.n	800506c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <TIM_Base_SetConfig+0x114>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_Base_SetConfig+0xf8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a0c      	ldr	r2, [pc, #48]	; (80050cc <TIM_Base_SetConfig+0x124>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d103      	bne.n	80050a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	615a      	str	r2, [r3, #20]
}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	40010000 	.word	0x40010000
 80050c0:	40000400 	.word	0x40000400
 80050c4:	40000800 	.word	0x40000800
 80050c8:	40000c00 	.word	0x40000c00
 80050cc:	40010400 	.word	0x40010400
 80050d0:	40014000 	.word	0x40014000
 80050d4:	40014400 	.word	0x40014400
 80050d8:	40014800 	.word	0x40014800
 80050dc:	40001800 	.word	0x40001800
 80050e0:	40001c00 	.word	0x40001c00
 80050e4:	40002000 	.word	0x40002000

080050e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e05a      	b.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a21      	ldr	r2, [pc, #132]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d022      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d01d      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d018      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00e      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a15      	ldr	r2, [pc, #84]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10c      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	4313      	orrs	r3, r2
 800519a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40010400 	.word	0x40010400
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40001800 	.word	0x40001800

080051e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e03f      	b.n	800529a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7fb fff2 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2224      	movs	r2, #36	; 0x24
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800524a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f929 	bl	80054a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695a      	ldr	r2, [r3, #20]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b08a      	sub	sp, #40	; 0x28
 80052a6:	af02      	add	r7, sp, #8
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	603b      	str	r3, [r7, #0]
 80052ae:	4613      	mov	r3, r2
 80052b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d17c      	bne.n	80053bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_UART_Transmit+0x2c>
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e075      	b.n	80053be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_UART_Transmit+0x3e>
 80052dc:	2302      	movs	r3, #2
 80052de:	e06e      	b.n	80053be <HAL_UART_Transmit+0x11c>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2221      	movs	r2, #33	; 0x21
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052f6:	f7fc f9bd 	bl	8001674 <HAL_GetTick>
 80052fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	88fa      	ldrh	r2, [r7, #6]
 8005300:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	88fa      	ldrh	r2, [r7, #6]
 8005306:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005310:	d108      	bne.n	8005324 <HAL_UART_Transmit+0x82>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	e003      	b.n	800532c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005334:	e02a      	b.n	800538c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2200      	movs	r2, #0
 800533e:	2180      	movs	r1, #128	; 0x80
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f840 	bl	80053c6 <UART_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e036      	b.n	80053be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10b      	bne.n	800536e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005364:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	3302      	adds	r3, #2
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	e007      	b.n	800537e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	781a      	ldrb	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	3301      	adds	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1cf      	bne.n	8005336 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2200      	movs	r2, #0
 800539e:	2140      	movs	r1, #64	; 0x40
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 f810 	bl	80053c6 <UART_WaitOnFlagUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e006      	b.n	80053be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e000      	b.n	80053be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
  }
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b090      	sub	sp, #64	; 0x40
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	4613      	mov	r3, r2
 80053d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d6:	e050      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053de:	d04c      	beq.n	800547a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d007      	beq.n	80053f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80053e6:	f7fc f945 	bl	8001674 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d241      	bcs.n	800547a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
 80053fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005416:	637a      	str	r2, [r7, #52]	; 0x34
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800541c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e5      	bne.n	80053f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3314      	adds	r3, #20
 8005430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	613b      	str	r3, [r7, #16]
   return(result);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	63bb      	str	r3, [r7, #56]	; 0x38
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3314      	adds	r3, #20
 8005448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800544a:	623a      	str	r2, [r7, #32]
 800544c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	69f9      	ldr	r1, [r7, #28]
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	61bb      	str	r3, [r7, #24]
   return(result);
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e00f      	b.n	800549a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	4013      	ands	r3, r2
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	429a      	cmp	r2, r3
 8005488:	bf0c      	ite	eq
 800548a:	2301      	moveq	r3, #1
 800548c:	2300      	movne	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	79fb      	ldrb	r3, [r7, #7]
 8005494:	429a      	cmp	r2, r3
 8005496:	d09f      	beq.n	80053d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3740      	adds	r7, #64	; 0x40
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a8:	b0c0      	sub	sp, #256	; 0x100
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	68d9      	ldr	r1, [r3, #12]
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	ea40 0301 	orr.w	r3, r0, r1
 80054cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	431a      	orrs	r2, r3
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054fc:	f021 010c 	bic.w	r1, r1, #12
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800550a:	430b      	orrs	r3, r1
 800550c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800551a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551e:	6999      	ldr	r1, [r3, #24]
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	ea40 0301 	orr.w	r3, r0, r1
 800552a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b8f      	ldr	r3, [pc, #572]	; (8005770 <UART_SetConfig+0x2cc>)
 8005534:	429a      	cmp	r2, r3
 8005536:	d005      	beq.n	8005544 <UART_SetConfig+0xa0>
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4b8d      	ldr	r3, [pc, #564]	; (8005774 <UART_SetConfig+0x2d0>)
 8005540:	429a      	cmp	r2, r3
 8005542:	d104      	bne.n	800554e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005544:	f7ff f87e 	bl	8004644 <HAL_RCC_GetPCLK2Freq>
 8005548:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800554c:	e003      	b.n	8005556 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800554e:	f7ff f865 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 8005552:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005560:	f040 810c 	bne.w	800577c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005568:	2200      	movs	r2, #0
 800556a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800556e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005572:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005576:	4622      	mov	r2, r4
 8005578:	462b      	mov	r3, r5
 800557a:	1891      	adds	r1, r2, r2
 800557c:	65b9      	str	r1, [r7, #88]	; 0x58
 800557e:	415b      	adcs	r3, r3
 8005580:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005586:	4621      	mov	r1, r4
 8005588:	eb12 0801 	adds.w	r8, r2, r1
 800558c:	4629      	mov	r1, r5
 800558e:	eb43 0901 	adc.w	r9, r3, r1
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800559e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055a6:	4690      	mov	r8, r2
 80055a8:	4699      	mov	r9, r3
 80055aa:	4623      	mov	r3, r4
 80055ac:	eb18 0303 	adds.w	r3, r8, r3
 80055b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055b4:	462b      	mov	r3, r5
 80055b6:	eb49 0303 	adc.w	r3, r9, r3
 80055ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055d2:	460b      	mov	r3, r1
 80055d4:	18db      	adds	r3, r3, r3
 80055d6:	653b      	str	r3, [r7, #80]	; 0x50
 80055d8:	4613      	mov	r3, r2
 80055da:	eb42 0303 	adc.w	r3, r2, r3
 80055de:	657b      	str	r3, [r7, #84]	; 0x54
 80055e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055e8:	f7fa fe0a 	bl	8000200 <__aeabi_uldivmod>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4b61      	ldr	r3, [pc, #388]	; (8005778 <UART_SetConfig+0x2d4>)
 80055f2:	fba3 2302 	umull	r2, r3, r3, r2
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	011c      	lsls	r4, r3, #4
 80055fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005604:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005608:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800560c:	4642      	mov	r2, r8
 800560e:	464b      	mov	r3, r9
 8005610:	1891      	adds	r1, r2, r2
 8005612:	64b9      	str	r1, [r7, #72]	; 0x48
 8005614:	415b      	adcs	r3, r3
 8005616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005618:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800561c:	4641      	mov	r1, r8
 800561e:	eb12 0a01 	adds.w	sl, r2, r1
 8005622:	4649      	mov	r1, r9
 8005624:	eb43 0b01 	adc.w	fp, r3, r1
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005634:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800563c:	4692      	mov	sl, r2
 800563e:	469b      	mov	fp, r3
 8005640:	4643      	mov	r3, r8
 8005642:	eb1a 0303 	adds.w	r3, sl, r3
 8005646:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800564a:	464b      	mov	r3, r9
 800564c:	eb4b 0303 	adc.w	r3, fp, r3
 8005650:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005660:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005664:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005668:	460b      	mov	r3, r1
 800566a:	18db      	adds	r3, r3, r3
 800566c:	643b      	str	r3, [r7, #64]	; 0x40
 800566e:	4613      	mov	r3, r2
 8005670:	eb42 0303 	adc.w	r3, r2, r3
 8005674:	647b      	str	r3, [r7, #68]	; 0x44
 8005676:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800567a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800567e:	f7fa fdbf 	bl	8000200 <__aeabi_uldivmod>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4611      	mov	r1, r2
 8005688:	4b3b      	ldr	r3, [pc, #236]	; (8005778 <UART_SetConfig+0x2d4>)
 800568a:	fba3 2301 	umull	r2, r3, r3, r1
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	2264      	movs	r2, #100	; 0x64
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	1acb      	subs	r3, r1, r3
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800569e:	4b36      	ldr	r3, [pc, #216]	; (8005778 <UART_SetConfig+0x2d4>)
 80056a0:	fba3 2302 	umull	r2, r3, r3, r2
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056ac:	441c      	add	r4, r3
 80056ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	1891      	adds	r1, r2, r2
 80056c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80056c8:	415b      	adcs	r3, r3
 80056ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056d0:	4641      	mov	r1, r8
 80056d2:	1851      	adds	r1, r2, r1
 80056d4:	6339      	str	r1, [r7, #48]	; 0x30
 80056d6:	4649      	mov	r1, r9
 80056d8:	414b      	adcs	r3, r1
 80056da:	637b      	str	r3, [r7, #52]	; 0x34
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056e8:	4659      	mov	r1, fp
 80056ea:	00cb      	lsls	r3, r1, #3
 80056ec:	4651      	mov	r1, sl
 80056ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f2:	4651      	mov	r1, sl
 80056f4:	00ca      	lsls	r2, r1, #3
 80056f6:	4610      	mov	r0, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	4642      	mov	r2, r8
 80056fe:	189b      	adds	r3, r3, r2
 8005700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005704:	464b      	mov	r3, r9
 8005706:	460a      	mov	r2, r1
 8005708:	eb42 0303 	adc.w	r3, r2, r3
 800570c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800571c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005720:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005724:	460b      	mov	r3, r1
 8005726:	18db      	adds	r3, r3, r3
 8005728:	62bb      	str	r3, [r7, #40]	; 0x28
 800572a:	4613      	mov	r3, r2
 800572c:	eb42 0303 	adc.w	r3, r2, r3
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005736:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800573a:	f7fa fd61 	bl	8000200 <__aeabi_uldivmod>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <UART_SetConfig+0x2d4>)
 8005744:	fba3 1302 	umull	r1, r3, r3, r2
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	2164      	movs	r1, #100	; 0x64
 800574c:	fb01 f303 	mul.w	r3, r1, r3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	3332      	adds	r3, #50	; 0x32
 8005756:	4a08      	ldr	r2, [pc, #32]	; (8005778 <UART_SetConfig+0x2d4>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	f003 0207 	and.w	r2, r3, #7
 8005762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4422      	add	r2, r4
 800576a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800576c:	e105      	b.n	800597a <UART_SetConfig+0x4d6>
 800576e:	bf00      	nop
 8005770:	40011000 	.word	0x40011000
 8005774:	40011400 	.word	0x40011400
 8005778:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800577c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005780:	2200      	movs	r2, #0
 8005782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005786:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800578a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800578e:	4642      	mov	r2, r8
 8005790:	464b      	mov	r3, r9
 8005792:	1891      	adds	r1, r2, r2
 8005794:	6239      	str	r1, [r7, #32]
 8005796:	415b      	adcs	r3, r3
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
 800579a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800579e:	4641      	mov	r1, r8
 80057a0:	1854      	adds	r4, r2, r1
 80057a2:	4649      	mov	r1, r9
 80057a4:	eb43 0501 	adc.w	r5, r3, r1
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	00eb      	lsls	r3, r5, #3
 80057b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057b6:	00e2      	lsls	r2, r4, #3
 80057b8:	4614      	mov	r4, r2
 80057ba:	461d      	mov	r5, r3
 80057bc:	4643      	mov	r3, r8
 80057be:	18e3      	adds	r3, r4, r3
 80057c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057c4:	464b      	mov	r3, r9
 80057c6:	eb45 0303 	adc.w	r3, r5, r3
 80057ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057ea:	4629      	mov	r1, r5
 80057ec:	008b      	lsls	r3, r1, #2
 80057ee:	4621      	mov	r1, r4
 80057f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057f4:	4621      	mov	r1, r4
 80057f6:	008a      	lsls	r2, r1, #2
 80057f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80057fc:	f7fa fd00 	bl	8000200 <__aeabi_uldivmod>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4b60      	ldr	r3, [pc, #384]	; (8005988 <UART_SetConfig+0x4e4>)
 8005806:	fba3 2302 	umull	r2, r3, r3, r2
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	011c      	lsls	r4, r3, #4
 800580e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005812:	2200      	movs	r2, #0
 8005814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005818:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800581c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005820:	4642      	mov	r2, r8
 8005822:	464b      	mov	r3, r9
 8005824:	1891      	adds	r1, r2, r2
 8005826:	61b9      	str	r1, [r7, #24]
 8005828:	415b      	adcs	r3, r3
 800582a:	61fb      	str	r3, [r7, #28]
 800582c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005830:	4641      	mov	r1, r8
 8005832:	1851      	adds	r1, r2, r1
 8005834:	6139      	str	r1, [r7, #16]
 8005836:	4649      	mov	r1, r9
 8005838:	414b      	adcs	r3, r1
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005848:	4659      	mov	r1, fp
 800584a:	00cb      	lsls	r3, r1, #3
 800584c:	4651      	mov	r1, sl
 800584e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005852:	4651      	mov	r1, sl
 8005854:	00ca      	lsls	r2, r1, #3
 8005856:	4610      	mov	r0, r2
 8005858:	4619      	mov	r1, r3
 800585a:	4603      	mov	r3, r0
 800585c:	4642      	mov	r2, r8
 800585e:	189b      	adds	r3, r3, r2
 8005860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005864:	464b      	mov	r3, r9
 8005866:	460a      	mov	r2, r1
 8005868:	eb42 0303 	adc.w	r3, r2, r3
 800586c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	67bb      	str	r3, [r7, #120]	; 0x78
 800587a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005888:	4649      	mov	r1, r9
 800588a:	008b      	lsls	r3, r1, #2
 800588c:	4641      	mov	r1, r8
 800588e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005892:	4641      	mov	r1, r8
 8005894:	008a      	lsls	r2, r1, #2
 8005896:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800589a:	f7fa fcb1 	bl	8000200 <__aeabi_uldivmod>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4b39      	ldr	r3, [pc, #228]	; (8005988 <UART_SetConfig+0x4e4>)
 80058a4:	fba3 1302 	umull	r1, r3, r3, r2
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	2164      	movs	r1, #100	; 0x64
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	3332      	adds	r3, #50	; 0x32
 80058b6:	4a34      	ldr	r2, [pc, #208]	; (8005988 <UART_SetConfig+0x4e4>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058c2:	441c      	add	r4, r3
 80058c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058c8:	2200      	movs	r2, #0
 80058ca:	673b      	str	r3, [r7, #112]	; 0x70
 80058cc:	677a      	str	r2, [r7, #116]	; 0x74
 80058ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058d2:	4642      	mov	r2, r8
 80058d4:	464b      	mov	r3, r9
 80058d6:	1891      	adds	r1, r2, r2
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	415b      	adcs	r3, r3
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058e2:	4641      	mov	r1, r8
 80058e4:	1851      	adds	r1, r2, r1
 80058e6:	6039      	str	r1, [r7, #0]
 80058e8:	4649      	mov	r1, r9
 80058ea:	414b      	adcs	r3, r1
 80058ec:	607b      	str	r3, [r7, #4]
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	f04f 0300 	mov.w	r3, #0
 80058f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058fa:	4659      	mov	r1, fp
 80058fc:	00cb      	lsls	r3, r1, #3
 80058fe:	4651      	mov	r1, sl
 8005900:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005904:	4651      	mov	r1, sl
 8005906:	00ca      	lsls	r2, r1, #3
 8005908:	4610      	mov	r0, r2
 800590a:	4619      	mov	r1, r3
 800590c:	4603      	mov	r3, r0
 800590e:	4642      	mov	r2, r8
 8005910:	189b      	adds	r3, r3, r2
 8005912:	66bb      	str	r3, [r7, #104]	; 0x68
 8005914:	464b      	mov	r3, r9
 8005916:	460a      	mov	r2, r1
 8005918:	eb42 0303 	adc.w	r3, r2, r3
 800591c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	663b      	str	r3, [r7, #96]	; 0x60
 8005928:	667a      	str	r2, [r7, #100]	; 0x64
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005936:	4649      	mov	r1, r9
 8005938:	008b      	lsls	r3, r1, #2
 800593a:	4641      	mov	r1, r8
 800593c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005940:	4641      	mov	r1, r8
 8005942:	008a      	lsls	r2, r1, #2
 8005944:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005948:	f7fa fc5a 	bl	8000200 <__aeabi_uldivmod>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <UART_SetConfig+0x4e4>)
 8005952:	fba3 1302 	umull	r1, r3, r3, r2
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	2164      	movs	r1, #100	; 0x64
 800595a:	fb01 f303 	mul.w	r3, r1, r3
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	011b      	lsls	r3, r3, #4
 8005962:	3332      	adds	r3, #50	; 0x32
 8005964:	4a08      	ldr	r2, [pc, #32]	; (8005988 <UART_SetConfig+0x4e4>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4422      	add	r2, r4
 8005978:	609a      	str	r2, [r3, #8]
}
 800597a:	bf00      	nop
 800597c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005980:	46bd      	mov	sp, r7
 8005982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005986:	bf00      	nop
 8005988:	51eb851f 	.word	0x51eb851f

0800598c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d123      	bne.n	80059e6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80059a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	6851      	ldr	r1, [r2, #4]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	6892      	ldr	r2, [r2, #8]
 80059b2:	4311      	orrs	r1, r2
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	68d2      	ldr	r2, [r2, #12]
 80059b8:	4311      	orrs	r1, r2
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	6912      	ldr	r2, [r2, #16]
 80059be:	4311      	orrs	r1, r2
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	6952      	ldr	r2, [r2, #20]
 80059c4:	4311      	orrs	r1, r2
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	6992      	ldr	r2, [r2, #24]
 80059ca:	4311      	orrs	r1, r2
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	69d2      	ldr	r2, [r2, #28]
 80059d0:	4311      	orrs	r1, r2
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	6a12      	ldr	r2, [r2, #32]
 80059d6:	4311      	orrs	r1, r2
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059dc:	430a      	orrs	r2, r1
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	e028      	b.n	8005a38 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	69d9      	ldr	r1, [r3, #28]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	4319      	orrs	r1, r3
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	430b      	orrs	r3, r1
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	6851      	ldr	r1, [r2, #4]
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	6892      	ldr	r2, [r2, #8]
 8005a18:	4311      	orrs	r1, r2
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	68d2      	ldr	r2, [r2, #12]
 8005a1e:	4311      	orrs	r1, r2
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	6912      	ldr	r2, [r2, #16]
 8005a24:	4311      	orrs	r1, r2
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	6952      	ldr	r2, [r2, #20]
 8005a2a:	4311      	orrs	r1, r2
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	6992      	ldr	r2, [r2, #24]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b085      	sub	sp, #20
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d128      	bne.n	8005aaa <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	1e59      	subs	r1, r3, #1
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	4319      	orrs	r1, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	021b      	lsls	r3, r3, #8
 8005a78:	4319      	orrs	r1, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	031b      	lsls	r3, r3, #12
 8005a82:	4319      	orrs	r1, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	041b      	lsls	r3, r3, #16
 8005a8c:	4319      	orrs	r1, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	051b      	lsls	r3, r3, #20
 8005a96:	4319      	orrs	r1, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	061b      	lsls	r3, r3, #24
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	609a      	str	r2, [r3, #8]
 8005aa8:	e02f      	b.n	8005b0a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ab2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	68d2      	ldr	r2, [r2, #12]
 8005aba:	3a01      	subs	r2, #1
 8005abc:	0311      	lsls	r1, r2, #12
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	6952      	ldr	r2, [r2, #20]
 8005ac2:	3a01      	subs	r2, #1
 8005ac4:	0512      	lsls	r2, r2, #20
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	1e59      	subs	r1, r3, #1
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	4319      	orrs	r1, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	4319      	orrs	r1, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	041b      	lsls	r3, r3, #16
 8005af8:	4319      	orrs	r1, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	061b      	lsls	r3, r3, #24
 8005b02:	430b      	orrs	r3, r1
 8005b04:	431a      	orrs	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f043 0201 	orr.w	r2, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f023 0201 	bic.w	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4a13      	ldr	r2, [pc, #76]	; (8005bc0 <USB_FlushTxFifo+0x64>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d901      	bls.n	8005b7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e01b      	b.n	8005bb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	daf2      	bge.n	8005b6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	019b      	lsls	r3, r3, #6
 8005b8c:	f043 0220 	orr.w	r2, r3, #32
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3301      	adds	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a08      	ldr	r2, [pc, #32]	; (8005bc0 <USB_FlushTxFifo+0x64>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e006      	b.n	8005bb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d0f0      	beq.n	8005b94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	00030d40 	.word	0x00030d40

08005bc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a11      	ldr	r2, [pc, #68]	; (8005c20 <USB_FlushRxFifo+0x5c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e018      	b.n	8005c14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	daf2      	bge.n	8005bd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2210      	movs	r2, #16
 8005bf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4a08      	ldr	r2, [pc, #32]	; (8005c20 <USB_FlushRxFifo+0x5c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d901      	bls.n	8005c06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e006      	b.n	8005c14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	d0f0      	beq.n	8005bf4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	00030d40 	.word	0x00030d40

08005c24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b08b      	sub	sp, #44	; 0x2c
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	089b      	lsrs	r3, r3, #2
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	623b      	str	r3, [r7, #32]
 8005c4e:	e014      	b.n	8005c7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	3301      	adds	r3, #1
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	3301      	adds	r3, #1
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	3301      	adds	r3, #1
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	3301      	adds	r3, #1
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	6a3a      	ldr	r2, [r7, #32]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d3e6      	bcc.n	8005c50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c82:	8bfb      	ldrh	r3, [r7, #30]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01e      	beq.n	8005cc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c92:	461a      	mov	r2, r3
 8005c94:	f107 0310 	add.w	r3, r7, #16
 8005c98:	6812      	ldr	r2, [r2, #0]
 8005c9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	701a      	strb	r2, [r3, #0]
      i++;
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005cba:	8bfb      	ldrh	r3, [r7, #30]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005cc0:	8bfb      	ldrh	r3, [r7, #30]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1ea      	bne.n	8005c9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	372c      	adds	r7, #44	; 0x2c
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cec:	68fb      	ldr	r3, [r7, #12]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0301 	and.w	r3, r3, #1
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d34:	f023 0303 	bic.w	r3, r3, #3
 8005d38:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	f003 0303 	and.w	r3, r3, #3
 8005d48:	68f9      	ldr	r1, [r7, #12]
 8005d4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d107      	bne.n	8005d68 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d64:	6053      	str	r3, [r2, #4]
 8005d66:	e009      	b.n	8005d7c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d106      	bne.n	8005d7c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d74:	461a      	mov	r2, r3
 8005d76:	f241 7370 	movw	r3, #6000	; 0x1770
 8005d7a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	b29b      	uxth	r3, r3
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b089      	sub	sp, #36	; 0x24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	0c9b      	lsrs	r3, r3, #18
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	0fdb      	lsrs	r3, r3, #31
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d104      	bne.n	8005e06 <USB_HC_Halt+0x5a>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	e0c8      	b.n	8005f98 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <USB_HC_Halt+0x66>
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d163      	bne.n	8005eda <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	0151      	lsls	r1, r2, #5
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	440a      	add	r2, r1
 8005e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e30:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 80ab 	bne.w	8005f96 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d133      	bne.n	8005eb4 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e6a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e8a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e98:	d81d      	bhi.n	8005ed6 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eb0:	d0ec      	beq.n	8005e8c <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005eb2:	e070      	b.n	8005f96 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ece:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ed2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ed4:	e05f      	b.n	8005f96 <USB_HC_Halt+0x1ea>
            break;
 8005ed6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ed8:	e05d      	b.n	8005f96 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ef8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d133      	bne.n	8005f72 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f28:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	0151      	lsls	r1, r2, #5
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	440a      	add	r2, r1
 8005f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f48:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f56:	d81d      	bhi.n	8005f94 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f6e:	d0ec      	beq.n	8005f4a <USB_HC_Halt+0x19e>
 8005f70:	e011      	b.n	8005f96 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	e000      	b.n	8005f96 <USB_HC_Halt+0x1ea>
          break;
 8005f94:	bf00      	nop
    }
  }

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3724      	adds	r7, #36	; 0x24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff fdbe 	bl	8005b3a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fbe:	2110      	movs	r1, #16
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff fdcb 	bl	8005b5c <USB_FlushTxFifo>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff fdf7 	bl	8005bc4 <USB_FlushRxFifo>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e01f      	b.n	8006026 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ffc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006004:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800600c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	4413      	add	r3, r2
 8006016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601a:	461a      	mov	r2, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	3301      	adds	r3, #1
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b0f      	cmp	r3, #15
 800602a:	d9dc      	bls.n	8005fe6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800602c:	2300      	movs	r3, #0
 800602e:	61bb      	str	r3, [r7, #24]
 8006030:	e034      	b.n	800609c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	4413      	add	r3, r2
 800603a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006048:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006050:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006058:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006066:	461a      	mov	r2, r3
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006078:	d80c      	bhi.n	8006094 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800608c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006090:	d0ec      	beq.n	800606c <USB_StopHost+0xc8>
 8006092:	e000      	b.n	8006096 <USB_StopHost+0xf2>
        break;
 8006094:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	3301      	adds	r3, #1
 800609a:	61bb      	str	r3, [r7, #24]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	2b0f      	cmp	r3, #15
 80060a0:	d9c7      	bls.n	8006032 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a8:	461a      	mov	r2, r3
 80060aa:	f04f 33ff 	mov.w	r3, #4294967295
 80060ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f04f 32ff 	mov.w	r2, #4294967295
 80060b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff fd2d 	bl	8005b18 <USB_EnableGlobalInt>

  return ret;
 80060be:	7ffb      	ldrb	r3, [r7, #31]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f804 	bl	80060ec <USBH_HandleSof>
}
 80060e4:	bf00      	nop
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b0b      	cmp	r3, #11
 80060fc:	d10a      	bne.n	8006114 <USBH_HandleSof+0x28>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
  }
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006140:	2200      	movs	r2, #0
 8006142:	4619      	mov	r1, r3
 8006144:	f000 f8ae 	bl	80062a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006148:	bf00      	nop
}
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006160:	bf00      	nop
}
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80061a0:	2200      	movs	r2, #0
 80061a2:	4619      	mov	r1, r3
 80061a4:	f000 f87e 	bl	80062a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 f912 	bl	80073fc <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	791b      	ldrb	r3, [r3, #4]
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f830 	bl	8006244 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	795b      	ldrb	r3, [r3, #5]
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f82a 	bl	8006244 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006204:	2200      	movs	r2, #0
 8006206:	4619      	mov	r1, r3
 8006208:	f000 f84c 	bl	80062a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006232:	2200      	movs	r2, #0
 8006234:	4619      	mov	r1, r3
 8006236:	f000 f835 	bl	80062a4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	2b0f      	cmp	r3, #15
 8006254:	d80d      	bhi.n	8006272 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	33e0      	adds	r3, #224	; 0xe0
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	33e0      	adds	r3, #224	; 0xe0
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	440b      	add	r3, r1
 8006270:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006286:	f3ef 8305 	mrs	r3, IPSR
 800628a:	607b      	str	r3, [r7, #4]
  return(result);
 800628c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800628e:	2b00      	cmp	r3, #0
 8006290:	bf14      	ite	ne
 8006292:	2301      	movne	r3, #1
 8006294:	2300      	moveq	r3, #0
 8006296:	b2db      	uxtb	r3, r3
}
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <osMessagePut+0x1e>
    ticks = 1;
 80062be:	2301      	movs	r3, #1
 80062c0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80062c2:	f7ff ffdd 	bl	8006280 <inHandlerMode>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d018      	beq.n	80062fe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80062cc:	f107 0210 	add.w	r2, r7, #16
 80062d0:	f107 0108 	add.w	r1, r7, #8
 80062d4:	2300      	movs	r3, #0
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 f9aa 	bl	8006630 <xQueueGenericSendFromISR>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d001      	beq.n	80062e6 <osMessagePut+0x42>
      return osErrorOS;
 80062e2:	23ff      	movs	r3, #255	; 0xff
 80062e4:	e018      	b.n	8006318 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d014      	beq.n	8006316 <osMessagePut+0x72>
 80062ec:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <osMessagePut+0x7c>)
 80062ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	e00b      	b.n	8006316 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80062fe:	f107 0108 	add.w	r1, r7, #8
 8006302:	2300      	movs	r3, #0
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 f894 	bl	8006434 <xQueueGenericSend>
 800630c:	4603      	mov	r3, r0
 800630e:	2b01      	cmp	r3, #1
 8006310:	d001      	beq.n	8006316 <osMessagePut+0x72>
      return osErrorOS;
 8006312:	23ff      	movs	r3, #255	; 0xff
 8006314:	e000      	b.n	8006318 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	601a      	str	r2, [r3, #0]
}
 8006360:	bf00      	nop
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d103      	bne.n	800638c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e00c      	b.n	80063a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3308      	adds	r3, #8
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	e002      	b.n	800639a <vListInsert+0x2e>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d2f6      	bcs.n	8006394 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
}
 80063d2:	bf00      	nop
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6892      	ldr	r2, [r2, #8]
 80063f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6852      	ldr	r2, [r2, #4]
 80063fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	429a      	cmp	r2, r3
 8006408:	d103      	bne.n	8006412 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	1e5a      	subs	r2, r3, #1
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
	...

08006434 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08e      	sub	sp, #56	; 0x38
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006442:	2300      	movs	r3, #0
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d103      	bne.n	8006474 <xQueueGenericSend+0x40>
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <xQueueGenericSend+0x44>
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <xQueueGenericSend+0x46>
 8006478:	2300      	movs	r3, #0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <xQueueGenericSend+0x60>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d103      	bne.n	80064a2 <xQueueGenericSend+0x6e>
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <xQueueGenericSend+0x72>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <xQueueGenericSend+0x74>
 80064a6:	2300      	movs	r3, #0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10a      	bne.n	80064c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	623b      	str	r3, [r7, #32]
}
 80064be:	bf00      	nop
 80064c0:	e7fe      	b.n	80064c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064c2:	f000 fd31 	bl	8006f28 <xTaskGetSchedulerState>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <xQueueGenericSend+0x9e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <xQueueGenericSend+0xa2>
 80064d2:	2301      	movs	r3, #1
 80064d4:	e000      	b.n	80064d8 <xQueueGenericSend+0xa4>
 80064d6:	2300      	movs	r3, #0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	61fb      	str	r3, [r7, #28]
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064f2:	f000 fe39 	bl	8007168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <xQueueGenericSend+0xd4>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d129      	bne.n	800655c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800650e:	f000 f92a 	bl	8006766 <prvCopyDataToQueue>
 8006512:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d010      	beq.n	800653e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	3324      	adds	r3, #36	; 0x24
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fbfb 	bl	8006d1c <xTaskRemoveFromEventList>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d013      	beq.n	8006554 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800652c:	4b3f      	ldr	r3, [pc, #252]	; (800662c <xQueueGenericSend+0x1f8>)
 800652e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	e00a      	b.n	8006554 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006544:	4b39      	ldr	r3, [pc, #228]	; (800662c <xQueueGenericSend+0x1f8>)
 8006546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006554:	f000 fe38 	bl	80071c8 <vPortExitCritical>
				return pdPASS;
 8006558:	2301      	movs	r3, #1
 800655a:	e063      	b.n	8006624 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d103      	bne.n	800656a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006562:	f000 fe31 	bl	80071c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006566:	2300      	movs	r3, #0
 8006568:	e05c      	b.n	8006624 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006570:	f107 0314 	add.w	r3, r7, #20
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fc33 	bl	8006de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800657a:	2301      	movs	r3, #1
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800657e:	f000 fe23 	bl	80071c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006582:	f000 f9c5 	bl	8006910 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006586:	f000 fdef 	bl	8007168 <vPortEnterCritical>
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006590:	b25b      	sxtb	r3, r3
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006596:	d103      	bne.n	80065a0 <xQueueGenericSend+0x16c>
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065a6:	b25b      	sxtb	r3, r3
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ac:	d103      	bne.n	80065b6 <xQueueGenericSend+0x182>
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065b6:	f000 fe07 	bl	80071c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065ba:	1d3a      	adds	r2, r7, #4
 80065bc:	f107 0314 	add.w	r3, r7, #20
 80065c0:	4611      	mov	r1, r2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fc22 	bl	8006e0c <xTaskCheckForTimeOut>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d124      	bne.n	8006618 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065d0:	f000 f985 	bl	80068de <prvIsQueueFull>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d018      	beq.n	800660c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	3310      	adds	r3, #16
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	4611      	mov	r1, r2
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fb76 	bl	8006cd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ea:	f000 f926 	bl	800683a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065ee:	f000 f99d 	bl	800692c <xTaskResumeAll>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f47f af7c 	bne.w	80064f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <xQueueGenericSend+0x1f8>)
 80065fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	e772      	b.n	80064f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800660c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800660e:	f000 f914 	bl	800683a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006612:	f000 f98b 	bl	800692c <xTaskResumeAll>
 8006616:	e76c      	b.n	80064f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800661a:	f000 f90e 	bl	800683a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800661e:	f000 f985 	bl	800692c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006622:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006624:	4618      	mov	r0, r3
 8006626:	3738      	adds	r7, #56	; 0x38
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	e000ed04 	.word	0xe000ed04

08006630 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b090      	sub	sp, #64	; 0x40
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d103      	bne.n	800666c <xQueueGenericSendFromISR+0x3c>
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <xQueueGenericSendFromISR+0x40>
 800666c:	2301      	movs	r3, #1
 800666e:	e000      	b.n	8006672 <xQueueGenericSendFromISR+0x42>
 8006670:	2300      	movs	r3, #0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006688:	bf00      	nop
 800668a:	e7fe      	b.n	800668a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b02      	cmp	r3, #2
 8006690:	d103      	bne.n	800669a <xQueueGenericSendFromISR+0x6a>
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <xQueueGenericSendFromISR+0x6e>
 800669a:	2301      	movs	r3, #1
 800669c:	e000      	b.n	80066a0 <xQueueGenericSendFromISR+0x70>
 800669e:	2300      	movs	r3, #0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	623b      	str	r3, [r7, #32]
}
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066ba:	f000 fe07 	bl	80072cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066be:	f3ef 8211 	mrs	r2, BASEPRI
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	61fa      	str	r2, [r7, #28]
 80066d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d302      	bcc.n	80066ec <xQueueGenericSendFromISR+0xbc>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d12f      	bne.n	800674c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	68b9      	ldr	r1, [r7, #8]
 8006700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006702:	f000 f830 	bl	8006766 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006706:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800670a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670e:	d112      	bne.n	8006736 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	2b00      	cmp	r3, #0
 8006716:	d016      	beq.n	8006746 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	3324      	adds	r3, #36	; 0x24
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fafd 	bl	8006d1c <xTaskRemoveFromEventList>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00e      	beq.n	8006746 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e007      	b.n	8006746 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006736:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800673a:	3301      	adds	r3, #1
 800673c:	b2db      	uxtb	r3, r3
 800673e:	b25a      	sxtb	r2, r3
 8006740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006746:	2301      	movs	r3, #1
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800674a:	e001      	b.n	8006750 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800674c:	2300      	movs	r3, #0
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800675a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800675c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800675e:	4618      	mov	r0, r3
 8006760:	3740      	adds	r7, #64	; 0x40
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	60b9      	str	r1, [r7, #8]
 8006770:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10d      	bne.n	80067a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d14d      	bne.n	8006828 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fbe7 	bl	8006f64 <xTaskPriorityDisinherit>
 8006796:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	609a      	str	r2, [r3, #8]
 800679e:	e043      	b.n	8006828 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d119      	bne.n	80067da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6858      	ldr	r0, [r3, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	461a      	mov	r2, r3
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	f000 fe8f 	bl	80074d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	441a      	add	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d32b      	bcc.n	8006828 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	605a      	str	r2, [r3, #4]
 80067d8:	e026      	b.n	8006828 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	68d8      	ldr	r0, [r3, #12]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	461a      	mov	r2, r3
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	f000 fe75 	bl	80074d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	425b      	negs	r3, r3
 80067f4:	441a      	add	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d207      	bcs.n	8006816 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	425b      	negs	r3, r3
 8006810:	441a      	add	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d105      	bne.n	8006828 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	3b01      	subs	r3, #1
 8006826:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006830:	697b      	ldr	r3, [r7, #20]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006842:	f000 fc91 	bl	8007168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800684c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800684e:	e011      	b.n	8006874 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	d012      	beq.n	800687e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3324      	adds	r3, #36	; 0x24
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fa5d 	bl	8006d1c <xTaskRemoveFromEventList>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006868:	f000 fb32 	bl	8006ed0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	3b01      	subs	r3, #1
 8006870:	b2db      	uxtb	r3, r3
 8006872:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006878:	2b00      	cmp	r3, #0
 800687a:	dce9      	bgt.n	8006850 <prvUnlockQueue+0x16>
 800687c:	e000      	b.n	8006880 <prvUnlockQueue+0x46>
					break;
 800687e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	22ff      	movs	r2, #255	; 0xff
 8006884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006888:	f000 fc9e 	bl	80071c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800688c:	f000 fc6c 	bl	8007168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006896:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006898:	e011      	b.n	80068be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d012      	beq.n	80068c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3310      	adds	r3, #16
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fa38 	bl	8006d1c <xTaskRemoveFromEventList>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068b2:	f000 fb0d 	bl	8006ed0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	dce9      	bgt.n	800689a <prvUnlockQueue+0x60>
 80068c6:	e000      	b.n	80068ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	22ff      	movs	r2, #255	; 0xff
 80068ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068d2:	f000 fc79 	bl	80071c8 <vPortExitCritical>
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068e6:	f000 fc3f 	bl	8007168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d102      	bne.n	80068fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068f6:	2301      	movs	r3, #1
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	e001      	b.n	8006900 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006900:	f000 fc62 	bl	80071c8 <vPortExitCritical>

	return xReturn;
 8006904:	68fb      	ldr	r3, [r7, #12]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006914:	4b04      	ldr	r3, [pc, #16]	; (8006928 <vTaskSuspendAll+0x18>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	4a03      	ldr	r2, [pc, #12]	; (8006928 <vTaskSuspendAll+0x18>)
 800691c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800691e:	bf00      	nop
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	200003bc 	.word	0x200003bc

0800692c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006936:	2300      	movs	r3, #0
 8006938:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800693a:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <xTaskResumeAll+0x114>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10a      	bne.n	8006958 <xTaskResumeAll+0x2c>
	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	603b      	str	r3, [r7, #0]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006958:	f000 fc06 	bl	8007168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800695c:	4b38      	ldr	r3, [pc, #224]	; (8006a40 <xTaskResumeAll+0x114>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3b01      	subs	r3, #1
 8006962:	4a37      	ldr	r2, [pc, #220]	; (8006a40 <xTaskResumeAll+0x114>)
 8006964:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006966:	4b36      	ldr	r3, [pc, #216]	; (8006a40 <xTaskResumeAll+0x114>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d161      	bne.n	8006a32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800696e:	4b35      	ldr	r3, [pc, #212]	; (8006a44 <xTaskResumeAll+0x118>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d05d      	beq.n	8006a32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006976:	e02e      	b.n	80069d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006978:	4b33      	ldr	r3, [pc, #204]	; (8006a48 <xTaskResumeAll+0x11c>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3318      	adds	r3, #24
 8006984:	4618      	mov	r0, r3
 8006986:	f7ff fd2a 	bl	80063de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3304      	adds	r3, #4
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fd25 	bl	80063de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	2201      	movs	r2, #1
 800699a:	409a      	lsls	r2, r3
 800699c:	4b2b      	ldr	r3, [pc, #172]	; (8006a4c <xTaskResumeAll+0x120>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	4a2a      	ldr	r2, [pc, #168]	; (8006a4c <xTaskResumeAll+0x120>)
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4a27      	ldr	r2, [pc, #156]	; (8006a50 <xTaskResumeAll+0x124>)
 80069b4:	441a      	add	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4619      	mov	r1, r3
 80069bc:	4610      	mov	r0, r2
 80069be:	f7ff fcb1 	bl	8006324 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c6:	4b23      	ldr	r3, [pc, #140]	; (8006a54 <xTaskResumeAll+0x128>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d302      	bcc.n	80069d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80069d0:	4b21      	ldr	r3, [pc, #132]	; (8006a58 <xTaskResumeAll+0x12c>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069d6:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <xTaskResumeAll+0x11c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1cc      	bne.n	8006978 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069e4:	f000 fa80 	bl	8006ee8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069e8:	4b1c      	ldr	r3, [pc, #112]	; (8006a5c <xTaskResumeAll+0x130>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d010      	beq.n	8006a16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069f4:	f000 f836 	bl	8006a64 <xTaskIncrementTick>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80069fe:	4b16      	ldr	r3, [pc, #88]	; (8006a58 <xTaskResumeAll+0x12c>)
 8006a00:	2201      	movs	r2, #1
 8006a02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1f1      	bne.n	80069f4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006a10:	4b12      	ldr	r3, [pc, #72]	; (8006a5c <xTaskResumeAll+0x130>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a16:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <xTaskResumeAll+0x12c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a22:	4b0f      	ldr	r3, [pc, #60]	; (8006a60 <xTaskResumeAll+0x134>)
 8006a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a32:	f000 fbc9 	bl	80071c8 <vPortExitCritical>

	return xAlreadyYielded;
 8006a36:	68bb      	ldr	r3, [r7, #8]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	200003bc 	.word	0x200003bc
 8006a44:	2000039c 	.word	0x2000039c
 8006a48:	20000374 	.word	0x20000374
 8006a4c:	200003a4 	.word	0x200003a4
 8006a50:	200002e0 	.word	0x200002e0
 8006a54:	200002dc 	.word	0x200002dc
 8006a58:	200003b0 	.word	0x200003b0
 8006a5c:	200003ac 	.word	0x200003ac
 8006a60:	e000ed04 	.word	0xe000ed04

08006a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a6e:	4b4e      	ldr	r3, [pc, #312]	; (8006ba8 <xTaskIncrementTick+0x144>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f040 808e 	bne.w	8006b94 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a78:	4b4c      	ldr	r3, [pc, #304]	; (8006bac <xTaskIncrementTick+0x148>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a80:	4a4a      	ldr	r2, [pc, #296]	; (8006bac <xTaskIncrementTick+0x148>)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d120      	bne.n	8006ace <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a8c:	4b48      	ldr	r3, [pc, #288]	; (8006bb0 <xTaskIncrementTick+0x14c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <xTaskIncrementTick+0x48>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	603b      	str	r3, [r7, #0]
}
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <xTaskIncrementTick+0x46>
 8006aac:	4b40      	ldr	r3, [pc, #256]	; (8006bb0 <xTaskIncrementTick+0x14c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	4b40      	ldr	r3, [pc, #256]	; (8006bb4 <xTaskIncrementTick+0x150>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a3e      	ldr	r2, [pc, #248]	; (8006bb0 <xTaskIncrementTick+0x14c>)
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	4a3e      	ldr	r2, [pc, #248]	; (8006bb4 <xTaskIncrementTick+0x150>)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	4b3d      	ldr	r3, [pc, #244]	; (8006bb8 <xTaskIncrementTick+0x154>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	4a3c      	ldr	r2, [pc, #240]	; (8006bb8 <xTaskIncrementTick+0x154>)
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	f000 fa0d 	bl	8006ee8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ace:	4b3b      	ldr	r3, [pc, #236]	; (8006bbc <xTaskIncrementTick+0x158>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d348      	bcc.n	8006b6a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ad8:	4b35      	ldr	r3, [pc, #212]	; (8006bb0 <xTaskIncrementTick+0x14c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d104      	bne.n	8006aec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae2:	4b36      	ldr	r3, [pc, #216]	; (8006bbc <xTaskIncrementTick+0x158>)
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae8:	601a      	str	r2, [r3, #0]
					break;
 8006aea:	e03e      	b.n	8006b6a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aec:	4b30      	ldr	r3, [pc, #192]	; (8006bb0 <xTaskIncrementTick+0x14c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d203      	bcs.n	8006b0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b04:	4a2d      	ldr	r2, [pc, #180]	; (8006bbc <xTaskIncrementTick+0x158>)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b0a:	e02e      	b.n	8006b6a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff fc64 	bl	80063de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	3318      	adds	r3, #24
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff fc5b 	bl	80063de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	409a      	lsls	r2, r3
 8006b30:	4b23      	ldr	r3, [pc, #140]	; (8006bc0 <xTaskIncrementTick+0x15c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	4a22      	ldr	r2, [pc, #136]	; (8006bc0 <xTaskIncrementTick+0x15c>)
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4a1f      	ldr	r2, [pc, #124]	; (8006bc4 <xTaskIncrementTick+0x160>)
 8006b48:	441a      	add	r2, r3
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4610      	mov	r0, r2
 8006b52:	f7ff fbe7 	bl	8006324 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5a:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <xTaskIncrementTick+0x164>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d3b9      	bcc.n	8006ad8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b64:	2301      	movs	r3, #1
 8006b66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b68:	e7b6      	b.n	8006ad8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b6a:	4b17      	ldr	r3, [pc, #92]	; (8006bc8 <xTaskIncrementTick+0x164>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	4914      	ldr	r1, [pc, #80]	; (8006bc4 <xTaskIncrementTick+0x160>)
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	440b      	add	r3, r1
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d901      	bls.n	8006b86 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006b82:	2301      	movs	r3, #1
 8006b84:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b86:	4b11      	ldr	r3, [pc, #68]	; (8006bcc <xTaskIncrementTick+0x168>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e004      	b.n	8006b9e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <xTaskIncrementTick+0x16c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	4a0d      	ldr	r2, [pc, #52]	; (8006bd0 <xTaskIncrementTick+0x16c>)
 8006b9c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b9e:	697b      	ldr	r3, [r7, #20]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	200003bc 	.word	0x200003bc
 8006bac:	200003a0 	.word	0x200003a0
 8006bb0:	2000036c 	.word	0x2000036c
 8006bb4:	20000370 	.word	0x20000370
 8006bb8:	200003b4 	.word	0x200003b4
 8006bbc:	200003b8 	.word	0x200003b8
 8006bc0:	200003a4 	.word	0x200003a4
 8006bc4:	200002e0 	.word	0x200002e0
 8006bc8:	200002dc 	.word	0x200002dc
 8006bcc:	200003b0 	.word	0x200003b0
 8006bd0:	200003ac 	.word	0x200003ac

08006bd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bda:	4b39      	ldr	r3, [pc, #228]	; (8006cc0 <vTaskSwitchContext+0xec>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006be2:	4b38      	ldr	r3, [pc, #224]	; (8006cc4 <vTaskSwitchContext+0xf0>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006be8:	e066      	b.n	8006cb8 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8006bea:	4b36      	ldr	r3, [pc, #216]	; (8006cc4 <vTaskSwitchContext+0xf0>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006bf0:	4b35      	ldr	r3, [pc, #212]	; (8006cc8 <vTaskSwitchContext+0xf4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	61fb      	str	r3, [r7, #28]
 8006bf8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d111      	bne.n	8006c2c <vTaskSwitchContext+0x58>
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d10b      	bne.n	8006c2c <vTaskSwitchContext+0x58>
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	3308      	adds	r3, #8
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d105      	bne.n	8006c2c <vTaskSwitchContext+0x58>
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	330c      	adds	r3, #12
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69ba      	ldr	r2, [r7, #24]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d008      	beq.n	8006c3e <vTaskSwitchContext+0x6a>
 8006c2c:	4b26      	ldr	r3, [pc, #152]	; (8006cc8 <vTaskSwitchContext+0xf4>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	4b25      	ldr	r3, [pc, #148]	; (8006cc8 <vTaskSwitchContext+0xf4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3334      	adds	r3, #52	; 0x34
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f7f9 fc63 	bl	8000504 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c3e:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <vTaskSwitchContext+0xf8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	fab3 f383 	clz	r3, r3
 8006c4a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c4c:	7afb      	ldrb	r3, [r7, #11]
 8006c4e:	f1c3 031f 	rsb	r3, r3, #31
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	491e      	ldr	r1, [pc, #120]	; (8006cd0 <vTaskSwitchContext+0xfc>)
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <vTaskSwitchContext+0xaa>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	607b      	str	r3, [r7, #4]
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <vTaskSwitchContext+0xa8>
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4613      	mov	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4a11      	ldr	r2, [pc, #68]	; (8006cd0 <vTaskSwitchContext+0xfc>)
 8006c8a:	4413      	add	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	605a      	str	r2, [r3, #4]
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d104      	bne.n	8006cae <vTaskSwitchContext+0xda>
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	605a      	str	r2, [r3, #4]
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4a04      	ldr	r2, [pc, #16]	; (8006cc8 <vTaskSwitchContext+0xf4>)
 8006cb6:	6013      	str	r3, [r2, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	3720      	adds	r7, #32
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	200003bc 	.word	0x200003bc
 8006cc4:	200003b0 	.word	0x200003b0
 8006cc8:	200002dc 	.word	0x200002dc
 8006ccc:	200003a4 	.word	0x200003a4
 8006cd0:	200002e0 	.word	0x200002e0

08006cd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10a      	bne.n	8006cfa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	60fb      	str	r3, [r7, #12]
}
 8006cf6:	bf00      	nop
 8006cf8:	e7fe      	b.n	8006cf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cfa:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <vTaskPlaceOnEventList+0x44>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	3318      	adds	r3, #24
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fb32 	bl	800636c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d08:	2101      	movs	r1, #1
 8006d0a:	6838      	ldr	r0, [r7, #0]
 8006d0c:	f000 f9b0 	bl	8007070 <prvAddCurrentTaskToDelayedList>
}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	200002dc 	.word	0x200002dc

08006d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	60fb      	str	r3, [r7, #12]
}
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	3318      	adds	r3, #24
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff fb46 	bl	80063de <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d52:	4b1d      	ldr	r3, [pc, #116]	; (8006dc8 <xTaskRemoveFromEventList+0xac>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d11c      	bne.n	8006d94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff fb3d 	bl	80063de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	2201      	movs	r2, #1
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	4b17      	ldr	r3, [pc, #92]	; (8006dcc <xTaskRemoveFromEventList+0xb0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	4a16      	ldr	r2, [pc, #88]	; (8006dcc <xTaskRemoveFromEventList+0xb0>)
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4a13      	ldr	r2, [pc, #76]	; (8006dd0 <xTaskRemoveFromEventList+0xb4>)
 8006d84:	441a      	add	r2, r3
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f7ff fac9 	bl	8006324 <vListInsertEnd>
 8006d92:	e005      	b.n	8006da0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	3318      	adds	r3, #24
 8006d98:	4619      	mov	r1, r3
 8006d9a:	480e      	ldr	r0, [pc, #56]	; (8006dd4 <xTaskRemoveFromEventList+0xb8>)
 8006d9c:	f7ff fac2 	bl	8006324 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da4:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <xTaskRemoveFromEventList+0xbc>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d905      	bls.n	8006dba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006dae:	2301      	movs	r3, #1
 8006db0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006db2:	4b0a      	ldr	r3, [pc, #40]	; (8006ddc <xTaskRemoveFromEventList+0xc0>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e001      	b.n	8006dbe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dbe:	697b      	ldr	r3, [r7, #20]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	200003bc 	.word	0x200003bc
 8006dcc:	200003a4 	.word	0x200003a4
 8006dd0:	200002e0 	.word	0x200002e0
 8006dd4:	20000374 	.word	0x20000374
 8006dd8:	200002dc 	.word	0x200002dc
 8006ddc:	200003b0 	.word	0x200003b0

08006de0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006de8:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <vTaskInternalSetTimeOutState+0x24>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <vTaskInternalSetTimeOutState+0x28>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	605a      	str	r2, [r3, #4]
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	200003b4 	.word	0x200003b4
 8006e08:	200003a0 	.word	0x200003a0

08006e0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	613b      	str	r3, [r7, #16]
}
 8006e2e:	bf00      	nop
 8006e30:	e7fe      	b.n	8006e30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10a      	bne.n	8006e4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	60fb      	str	r3, [r7, #12]
}
 8006e4a:	bf00      	nop
 8006e4c:	e7fe      	b.n	8006e4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e4e:	f000 f98b 	bl	8007168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e52:	4b1d      	ldr	r3, [pc, #116]	; (8006ec8 <xTaskCheckForTimeOut+0xbc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6a:	d102      	bne.n	8006e72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61fb      	str	r3, [r7, #28]
 8006e70:	e023      	b.n	8006eba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <xTaskCheckForTimeOut+0xc0>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d007      	beq.n	8006e8e <xTaskCheckForTimeOut+0x82>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d302      	bcc.n	8006e8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	61fb      	str	r3, [r7, #28]
 8006e8c:	e015      	b.n	8006eba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d20b      	bcs.n	8006eb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff ff9b 	bl	8006de0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]
 8006eae:	e004      	b.n	8006eba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006eba:	f000 f985 	bl	80071c8 <vPortExitCritical>

	return xReturn;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3720      	adds	r7, #32
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	200003a0 	.word	0x200003a0
 8006ecc:	200003b4 	.word	0x200003b4

08006ed0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ed4:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <vTaskMissedYield+0x14>)
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
}
 8006eda:	bf00      	nop
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	200003b0 	.word	0x200003b0

08006ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eee:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <prvResetNextTaskUnblockTime+0x38>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <prvResetNextTaskUnblockTime+0x3c>)
 8006efa:	f04f 32ff 	mov.w	r2, #4294967295
 8006efe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f00:	e008      	b.n	8006f14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f02:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <prvResetNextTaskUnblockTime+0x38>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	4a04      	ldr	r2, [pc, #16]	; (8006f24 <prvResetNextTaskUnblockTime+0x3c>)
 8006f12:	6013      	str	r3, [r2, #0]
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	2000036c 	.word	0x2000036c
 8006f24:	200003b8 	.word	0x200003b8

08006f28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <xTaskGetSchedulerState+0x34>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d102      	bne.n	8006f3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f36:	2301      	movs	r3, #1
 8006f38:	607b      	str	r3, [r7, #4]
 8006f3a:	e008      	b.n	8006f4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f3c:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <xTaskGetSchedulerState+0x38>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f44:	2302      	movs	r3, #2
 8006f46:	607b      	str	r3, [r7, #4]
 8006f48:	e001      	b.n	8006f4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f4e:	687b      	ldr	r3, [r7, #4]
	}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	200003a8 	.word	0x200003a8
 8006f60:	200003bc 	.word	0x200003bc

08006f64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d06e      	beq.n	8007058 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f7a:	4b3a      	ldr	r3, [pc, #232]	; (8007064 <xTaskPriorityDisinherit+0x100>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d00a      	beq.n	8006f9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	60fb      	str	r3, [r7, #12]
}
 8006f96:	bf00      	nop
 8006f98:	e7fe      	b.n	8006f98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	60bb      	str	r3, [r7, #8]
}
 8006fb4:	bf00      	nop
 8006fb6:	e7fe      	b.n	8006fb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fbc:	1e5a      	subs	r2, r3, #1
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d044      	beq.n	8007058 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d140      	bne.n	8007058 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff f9ff 	bl	80063de <uxListRemove>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d115      	bne.n	8007012 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fea:	491f      	ldr	r1, [pc, #124]	; (8007068 <xTaskPriorityDisinherit+0x104>)
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <xTaskPriorityDisinherit+0xae>
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	2201      	movs	r2, #1
 8007002:	fa02 f303 	lsl.w	r3, r2, r3
 8007006:	43da      	mvns	r2, r3
 8007008:	4b18      	ldr	r3, [pc, #96]	; (800706c <xTaskPriorityDisinherit+0x108>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4013      	ands	r3, r2
 800700e:	4a17      	ldr	r2, [pc, #92]	; (800706c <xTaskPriorityDisinherit+0x108>)
 8007010:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701e:	f1c3 0207 	rsb	r2, r3, #7
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	2201      	movs	r2, #1
 800702c:	409a      	lsls	r2, r3
 800702e:	4b0f      	ldr	r3, [pc, #60]	; (800706c <xTaskPriorityDisinherit+0x108>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4313      	orrs	r3, r2
 8007034:	4a0d      	ldr	r2, [pc, #52]	; (800706c <xTaskPriorityDisinherit+0x108>)
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4a08      	ldr	r2, [pc, #32]	; (8007068 <xTaskPriorityDisinherit+0x104>)
 8007046:	441a      	add	r2, r3
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3304      	adds	r3, #4
 800704c:	4619      	mov	r1, r3
 800704e:	4610      	mov	r0, r2
 8007050:	f7ff f968 	bl	8006324 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007054:	2301      	movs	r3, #1
 8007056:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007058:	697b      	ldr	r3, [r7, #20]
	}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	200002dc 	.word	0x200002dc
 8007068:	200002e0 	.word	0x200002e0
 800706c:	200003a4 	.word	0x200003a4

08007070 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800707a:	4b29      	ldr	r3, [pc, #164]	; (8007120 <prvAddCurrentTaskToDelayedList+0xb0>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007080:	4b28      	ldr	r3, [pc, #160]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3304      	adds	r3, #4
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff f9a9 	bl	80063de <uxListRemove>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007092:	4b24      	ldr	r3, [pc, #144]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007098:	2201      	movs	r2, #1
 800709a:	fa02 f303 	lsl.w	r3, r2, r3
 800709e:	43da      	mvns	r2, r3
 80070a0:	4b21      	ldr	r3, [pc, #132]	; (8007128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4013      	ands	r3, r2
 80070a6:	4a20      	ldr	r2, [pc, #128]	; (8007128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d10a      	bne.n	80070c8 <prvAddCurrentTaskToDelayedList+0x58>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d007      	beq.n	80070c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070b8:	4b1a      	ldr	r3, [pc, #104]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3304      	adds	r3, #4
 80070be:	4619      	mov	r1, r3
 80070c0:	481a      	ldr	r0, [pc, #104]	; (800712c <prvAddCurrentTaskToDelayedList+0xbc>)
 80070c2:	f7ff f92f 	bl	8006324 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070c6:	e026      	b.n	8007116 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070d0:	4b14      	ldr	r3, [pc, #80]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d209      	bcs.n	80070f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070e0:	4b13      	ldr	r3, [pc, #76]	; (8007130 <prvAddCurrentTaskToDelayedList+0xc0>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4b0f      	ldr	r3, [pc, #60]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3304      	adds	r3, #4
 80070ea:	4619      	mov	r1, r3
 80070ec:	4610      	mov	r0, r2
 80070ee:	f7ff f93d 	bl	800636c <vListInsert>
}
 80070f2:	e010      	b.n	8007116 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070f4:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <prvAddCurrentTaskToDelayedList+0xc4>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4619      	mov	r1, r3
 8007100:	4610      	mov	r0, r2
 8007102:	f7ff f933 	bl	800636c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007106:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	429a      	cmp	r2, r3
 800710e:	d202      	bcs.n	8007116 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007110:	4a09      	ldr	r2, [pc, #36]	; (8007138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	6013      	str	r3, [r2, #0]
}
 8007116:	bf00      	nop
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	200003a0 	.word	0x200003a0
 8007124:	200002dc 	.word	0x200002dc
 8007128:	200003a4 	.word	0x200003a4
 800712c:	20000388 	.word	0x20000388
 8007130:	20000370 	.word	0x20000370
 8007134:	2000036c 	.word	0x2000036c
 8007138:	200003b8 	.word	0x200003b8
 800713c:	00000000 	.word	0x00000000

08007140 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007140:	4b07      	ldr	r3, [pc, #28]	; (8007160 <pxCurrentTCBConst2>)
 8007142:	6819      	ldr	r1, [r3, #0]
 8007144:	6808      	ldr	r0, [r1, #0]
 8007146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714a:	f380 8809 	msr	PSP, r0
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f04f 0000 	mov.w	r0, #0
 8007156:	f380 8811 	msr	BASEPRI, r0
 800715a:	4770      	bx	lr
 800715c:	f3af 8000 	nop.w

08007160 <pxCurrentTCBConst2>:
 8007160:	200002dc 	.word	0x200002dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop

08007168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	607b      	str	r3, [r7, #4]
}
 8007180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007182:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <vPortEnterCritical+0x58>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3301      	adds	r3, #1
 8007188:	4a0d      	ldr	r2, [pc, #52]	; (80071c0 <vPortEnterCritical+0x58>)
 800718a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800718c:	4b0c      	ldr	r3, [pc, #48]	; (80071c0 <vPortEnterCritical+0x58>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d10f      	bne.n	80071b4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007194:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <vPortEnterCritical+0x5c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <vPortEnterCritical+0x4c>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	603b      	str	r3, [r7, #0]
}
 80071b0:	bf00      	nop
 80071b2:	e7fe      	b.n	80071b2 <vPortEnterCritical+0x4a>
	}
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	2000000c 	.word	0x2000000c
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071ce:	4b12      	ldr	r3, [pc, #72]	; (8007218 <vPortExitCritical+0x50>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10a      	bne.n	80071ec <vPortExitCritical+0x24>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	607b      	str	r3, [r7, #4]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071ec:	4b0a      	ldr	r3, [pc, #40]	; (8007218 <vPortExitCritical+0x50>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	4a09      	ldr	r2, [pc, #36]	; (8007218 <vPortExitCritical+0x50>)
 80071f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071f6:	4b08      	ldr	r3, [pc, #32]	; (8007218 <vPortExitCritical+0x50>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d105      	bne.n	800720a <vPortExitCritical+0x42>
 80071fe:	2300      	movs	r3, #0
 8007200:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	f383 8811 	msr	BASEPRI, r3
}
 8007208:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	2000000c 	.word	0x2000000c
 800721c:	00000000 	.word	0x00000000

08007220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007220:	f3ef 8009 	mrs	r0, PSP
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4b15      	ldr	r3, [pc, #84]	; (8007280 <pxCurrentTCBConst>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	f01e 0f10 	tst.w	lr, #16
 8007230:	bf08      	it	eq
 8007232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723a:	6010      	str	r0, [r2, #0]
 800723c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007244:	f380 8811 	msr	BASEPRI, r0
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f7ff fcc0 	bl	8006bd4 <vTaskSwitchContext>
 8007254:	f04f 0000 	mov.w	r0, #0
 8007258:	f380 8811 	msr	BASEPRI, r0
 800725c:	bc09      	pop	{r0, r3}
 800725e:	6819      	ldr	r1, [r3, #0]
 8007260:	6808      	ldr	r0, [r1, #0]
 8007262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007266:	f01e 0f10 	tst.w	lr, #16
 800726a:	bf08      	it	eq
 800726c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007270:	f380 8809 	msr	PSP, r0
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	f3af 8000 	nop.w

08007280 <pxCurrentTCBConst>:
 8007280:	200002dc 	.word	0x200002dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop

08007288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	607b      	str	r3, [r7, #4]
}
 80072a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072a2:	f7ff fbdf 	bl	8006a64 <xTaskIncrementTick>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072ac:	4b06      	ldr	r3, [pc, #24]	; (80072c8 <SysTick_Handler+0x40>)
 80072ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	2300      	movs	r3, #0
 80072b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f383 8811 	msr	BASEPRI, r3
}
 80072be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	e000ed04 	.word	0xe000ed04

080072cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072d2:	f3ef 8305 	mrs	r3, IPSR
 80072d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b0f      	cmp	r3, #15
 80072dc:	d914      	bls.n	8007308 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072de:	4a17      	ldr	r2, [pc, #92]	; (800733c <vPortValidateInterruptPriority+0x70>)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072e8:	4b15      	ldr	r3, [pc, #84]	; (8007340 <vPortValidateInterruptPriority+0x74>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	7afa      	ldrb	r2, [r7, #11]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d20a      	bcs.n	8007308 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	607b      	str	r3, [r7, #4]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007308:	4b0e      	ldr	r3, [pc, #56]	; (8007344 <vPortValidateInterruptPriority+0x78>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007310:	4b0d      	ldr	r3, [pc, #52]	; (8007348 <vPortValidateInterruptPriority+0x7c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	429a      	cmp	r2, r3
 8007316:	d90a      	bls.n	800732e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	603b      	str	r3, [r7, #0]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <vPortValidateInterruptPriority+0x60>
	}
 800732e:	bf00      	nop
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	e000e3f0 	.word	0xe000e3f0
 8007340:	200003c0 	.word	0x200003c0
 8007344:	e000ed0c 	.word	0xe000ed0c
 8007348:	200003c4 	.word	0x200003c4

0800734c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe feb4 	bl	80060c8 <USBH_LL_IncTimer>
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe fef8 	bl	800616c <USBH_LL_Connect>
}
 800737c:	bf00      	nop
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe ff0d 	bl	80061b2 <USBH_LL_Disconnect>
}
 8007398:	bf00      	nop
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	70fb      	strb	r3, [r7, #3]
 80073ac:	4613      	mov	r3, r2
 80073ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe ff2d 	bl	8006216 <USBH_LL_NotifyURBChange>
#endif
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fe fea2 	bl	800611c <USBH_LL_PortEnabled>
}
 80073d8:	bf00      	nop
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe feae 	bl	8006150 <USBH_LL_PortDisabled>
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007412:	4618      	mov	r0, r3
 8007414:	f7fa ff4a 	bl	80022ac <HAL_HCD_Stop>
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	4618      	mov	r0, r3
 8007420:	f000 f808 	bl	8007434 <USBH_Get_USB_Status>
 8007424:	4603      	mov	r3, r0
 8007426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007428:	7bbb      	ldrb	r3, [r7, #14]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007442:	79fb      	ldrb	r3, [r7, #7]
 8007444:	2b03      	cmp	r3, #3
 8007446:	d817      	bhi.n	8007478 <USBH_Get_USB_Status+0x44>
 8007448:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <USBH_Get_USB_Status+0x1c>)
 800744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744e:	bf00      	nop
 8007450:	08007461 	.word	0x08007461
 8007454:	08007467 	.word	0x08007467
 8007458:	0800746d 	.word	0x0800746d
 800745c:	08007473 	.word	0x08007473
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]
    break;
 8007464:	e00b      	b.n	800747e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007466:	2302      	movs	r3, #2
 8007468:	73fb      	strb	r3, [r7, #15]
    break;
 800746a:	e008      	b.n	800747e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
    break;
 8007470:	e005      	b.n	800747e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007472:	2302      	movs	r3, #2
 8007474:	73fb      	strb	r3, [r7, #15]
    break;
 8007476:	e002      	b.n	800747e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007478:	2302      	movs	r3, #2
 800747a:	73fb      	strb	r3, [r7, #15]
    break;
 800747c:	bf00      	nop
  }
  return usb_status;
 800747e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <__libc_init_array>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4d0d      	ldr	r5, [pc, #52]	; (80074c4 <__libc_init_array+0x38>)
 8007490:	4c0d      	ldr	r4, [pc, #52]	; (80074c8 <__libc_init_array+0x3c>)
 8007492:	1b64      	subs	r4, r4, r5
 8007494:	10a4      	asrs	r4, r4, #2
 8007496:	2600      	movs	r6, #0
 8007498:	42a6      	cmp	r6, r4
 800749a:	d109      	bne.n	80074b0 <__libc_init_array+0x24>
 800749c:	4d0b      	ldr	r5, [pc, #44]	; (80074cc <__libc_init_array+0x40>)
 800749e:	4c0c      	ldr	r4, [pc, #48]	; (80074d0 <__libc_init_array+0x44>)
 80074a0:	f000 f82e 	bl	8007500 <_init>
 80074a4:	1b64      	subs	r4, r4, r5
 80074a6:	10a4      	asrs	r4, r4, #2
 80074a8:	2600      	movs	r6, #0
 80074aa:	42a6      	cmp	r6, r4
 80074ac:	d105      	bne.n	80074ba <__libc_init_array+0x2e>
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b4:	4798      	blx	r3
 80074b6:	3601      	adds	r6, #1
 80074b8:	e7ee      	b.n	8007498 <__libc_init_array+0xc>
 80074ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80074be:	4798      	blx	r3
 80074c0:	3601      	adds	r6, #1
 80074c2:	e7f2      	b.n	80074aa <__libc_init_array+0x1e>
 80074c4:	08007544 	.word	0x08007544
 80074c8:	08007544 	.word	0x08007544
 80074cc:	08007544 	.word	0x08007544
 80074d0:	08007548 	.word	0x08007548

080074d4 <memcpy>:
 80074d4:	440a      	add	r2, r1
 80074d6:	4291      	cmp	r1, r2
 80074d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074dc:	d100      	bne.n	80074e0 <memcpy+0xc>
 80074de:	4770      	bx	lr
 80074e0:	b510      	push	{r4, lr}
 80074e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ea:	4291      	cmp	r1, r2
 80074ec:	d1f9      	bne.n	80074e2 <memcpy+0xe>
 80074ee:	bd10      	pop	{r4, pc}

080074f0 <memset>:
 80074f0:	4402      	add	r2, r0
 80074f2:	4603      	mov	r3, r0
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d100      	bne.n	80074fa <memset+0xa>
 80074f8:	4770      	bx	lr
 80074fa:	f803 1b01 	strb.w	r1, [r3], #1
 80074fe:	e7f9      	b.n	80074f4 <memset+0x4>

08007500 <_init>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	bf00      	nop
 8007504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007506:	bc08      	pop	{r3}
 8007508:	469e      	mov	lr, r3
 800750a:	4770      	bx	lr

0800750c <_fini>:
 800750c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800750e:	bf00      	nop
 8007510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007512:	bc08      	pop	{r3}
 8007514:	469e      	mov	lr, r3
 8007516:	4770      	bx	lr
